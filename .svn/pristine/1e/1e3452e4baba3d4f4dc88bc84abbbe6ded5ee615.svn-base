package enklikanketa.com.a1kapanel.Tasks;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import enklikanketa.com.a1kapanel.Libraries.GeneralLib;
import enklikanketa.com.a1kapanel.R;
import enklikanketa.com.a1kapanel.SubscriptionInfo;
import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.Network;
import enklikanketa.com.a1kapanel.System.ServerCommunication;
import enklikanketa.com.a1kapanel.vpis;

public class getSubscriptionsList extends AsyncTask<Object, Object, String> {

    Activity ctx;
    private TextView text_ni_vprasalnikov;
    ProgressDialog loader;
    ListView seznam;
    List<HashMap<String, String>> list = new ArrayList<>();
    private View parent;
    private String TAG = "getSubscriptionsList";

    public getSubscriptionsList(Activity context, TextView text_ni_vprasalnikov1,
                         ListView seznam1, View parent1) {

        ctx = context;
        text_ni_vprasalnikov = text_ni_vprasalnikov1;
        seznam = seznam1;
        parent = parent1;
    }

    protected void onPreExecute() {
        super.onPreExecute();
        loader = ProgressDialog.show(ctx, "",
                ctx.getResources().getString(R.string.gathering_data_progress), true);
    }

    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        if (result == null) {
            GeneralLib.dismissDialog(ctx, loader);
            //preveri, ce je povezava
            //Network.checkMobileInternet(ctx, true);
            Toast.makeText(ctx, ctx.getText(R.string.general_remote_server_error)
                    .toString(), Toast.LENGTH_LONG).show();
        } else if (result.equals("OK")) {
            createSeznam(ctx, seznam, list);
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.GONE);
            seznam.setVisibility(View.VISIBLE);
        } else if (result.equals("empty") || result.equals("[]")) {
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.VISIBLE);
            if (parent != null)
                parent.setVisibility(View.GONE);
            seznam.setVisibility(View.GONE);
        } else {
            GeneralLib.dismissDialog(ctx, loader);
            //if (!GeneralLib.otherErrors(ctx, result))
            GeneralLib.reportCrash(new Exception("getSurveyList onPostExecute() has error: "
                    + result), null);
        }

        GeneralLib.dismissDialog(ctx, loader);
    }

    protected String doInBackground(Object... params) {
        //pobere podatke o uporabniku iz baze
        Database DB = (Database) Database.getInstance(ctx);
        String[] uporabnik = DB.getRowData("uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // uporabnik prijavljen
        if (uporabnik != null) {
            // poslji
            JSONObject object = new JSONObject();
            JSONObject logIn = new JSONObject();
            String result = null;
            try {
                logIn.put("identifier", uporabnik[0]);
                logIn.put("id_server", uporabnik[1]);
                object.put("Login", logIn);
                object.put("timeZone", Calendar.getInstance().getTimeZone().getID());

                ServerCommunication SC = new ServerCommunication(ctx);
                result = SC.PostGetSubscriptionsList(object);

                if (result != null) {

                    JSONArray vprasalniki = new JSONArray(result);

                    if (vprasalniki.length() > 0) {
                        for (int i = 0; i < vprasalniki.length(); i++) {
                            HashMap<String, String> map = new HashMap<>();
                            JSONObject vprasalnik = new JSONObject(vprasalniki.getJSONObject(i).toString());
                            String ime = GeneralLib.fromHtml(vprasalnik.getString("naslov")).toString();
                            map.put("ime", ime);
                            map.put("srv_id", vprasalnik.getString("srv_id"));
                            map.put("starts", vprasalnik.getString("starts"));
                            map.put("expire", vprasalnik.getString("expire"));
                            map.put("text_spodaj", vprasalnik.getString("starts"));
                            //map.put("link", vprasalnik.get("link").toString());
                            list.add(map);
                        }
                        return "OK";
                    } else
                        return "empty";

                }
                //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
                else {
                    //preveri, ce je povezava
                    return null;
                }
            } catch (JSONException e) {
                Log.e(TAG, "getSurveyList onPostExecute(): " + e);
                GeneralLib.reportCrash(e, result);
                GeneralLib.dismissDialog(ctx, loader);
                return result;
            }
        }
        // ni prijavljen - gre na prijavo
        else {
            Intent myIntent = new Intent(ctx, vpis.class);
            ctx.startActivity(myIntent);
            //GeneralLib.finishNazaj(ctx);
            ctx.finish();
            return null;
        }
    }

    /**
     * Fills ListView for all questionaires
     *
     * @param ctx             - Activity
     * @param seznam          - ListView - ListView to fill
     * @param vprasalniki     - List<HashMap<String, String>> - data to put in ListView
     */
    private void createSeznam(final Activity ctx, ListView seznam,
                              List<HashMap<String, String>> vprasalniki) {
        //kateri podatki se rabijo (po vrsti)
        String[] from = new String[]{"ime", "text_spodaj", "srv_id", "starts", "ime", "expire"};
        //v katere textviewe se bodo filali zgornji podatki (po vrsti)
        int[] to = new int[]{R.id.litem_zgoraj, R.id.litem_spodaj, R.id.id, R.id.starts, R.id.ime, R.id.expire};

        //nastavi adapter
        SimpleAdapter adapter = new SimpleAdapter(
                ctx, vprasalniki, R.layout.list_item_subscriptions, from, to);
        seznam.setAdapter(adapter);

        //nastavi, ko se item (vprasalnik) izbere v listviewu
        seznam.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
        seznam.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position1, long id) {
                view.setSelected(true);

                //dobi active
                //TextView link = view.findViewById(R.id.link);
                //dobi timestamp
                TextView starts = view.findViewById(R.id.starts);
                //dobi id
                TextView id1 = view.findViewById(R.id.id);
                //dobi id triggered geofenca
                TextView title = view.findViewById(R.id.ime);
                //dobi id triggered geofenca
                TextView expire = view.findViewById(R.id.expire);

                Intent myIntent = new Intent(ctx, SubscriptionInfo.class);
                myIntent.putExtra("starts", starts.getText().toString());
                myIntent.putExtra("expire", expire.getText().toString());
                myIntent.putExtra("srv_id", id1.getText().toString());
                myIntent.putExtra("title", title.getText().toString());

                if (Network.checkMobileInternet(ctx, true)) {
                    ctx.startActivity(myIntent);
                    //generalLib.finishNaprej(ctx, false);
                }
            }
        });
    }// konec createSeznam()
}