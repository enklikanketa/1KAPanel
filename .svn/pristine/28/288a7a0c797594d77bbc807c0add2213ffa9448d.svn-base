/*
 * Made by:
 * Uro� Podkri�nik
 * uros.podkriznik(at)gmail.com
 * Tel.: 041829380
 */

package enklikanketa.com.a1kapanel;

import android.app.Activity;
import android.app.Fragment;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.widget.SwipeRefreshLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.TextView;

import java.util.HashMap;

import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.Network;
import enklikanketa.com.a1kapanel.Tasks.getSurveyList;
import enklikanketa.com.a1kapanel.Tasks.sendTriggeredGeofencesTask;

public class VsiVprasalniki extends Fragment {

    ListView seznam;
    Activity ctx;
    boolean posodobiSeznam = true;
    TextView text_ni_vprasalnikov;
    String TAG = "VsiVprasalniki";

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);

        //getActivity().setTitle(getResources().getString(R.string.vsiVprasalniki));

        View view = inflater.inflate(R.layout.vsi_vprasalniki, container, false);
        if (posodobiSeznam) {
            seznam = view.findViewById(R.id.vsiVprasalnikiList);
            text_ni_vprasalnikov = view.findViewById(R.id.ni_podatkov_vprasalniki);
            posodobiSeznam = false;
        }

        final SwipeRefreshLayout swipeLayout = view.findViewById(R.id.swiperefresh_vsivprasalniki);
        swipeLayout.setColorSchemeResources(R.color.colorPrimary);
        swipeLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener()
        {
            @Override
            public void onRefresh()
            {
                if (Network.checkMobileInternet(ctx, true)) {
                    updateSurveyList();
                }
                swipeLayout.setRefreshing(false);
            }
        });

        final FloatingActionButton fab = view.findViewById(R.id.fab);
        //EntryLib elib = new EntryLib(ctx);
        Database DBH = (Database) Database.getInstance(ctx);
        HashMap<String, String> entry = DBH.getRowHashMapData("entry", new String[]{"srv_id"}, null);
        if(entry != null){
            fab.setVisibility(View.VISIBLE);
            fab.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                }
            });
        }

        return view;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ctx = getActivity();
    }

    @Override
    public void onResume() {
        super.onResume();
        if (Network.checkMobileInternet(ctx, true)) {
            updateSurveyList();
        }
    }

    private void updateSurveyList(){
        //does data of triggered geofences exists
        int stej = ((Database) Database.getInstance(ctx)).stejData("things_to_send", "name = 'triggered_geofences'");
        //if there are triggered geofences, send them to server first
        if(stej > 0) {
            new sendTriggeredGeofencesTask(ctx, null, new sendTriggeredGeofencesTask.TaskListener() {
                @Override
                public void onFinished() {
                    //when triggered geofences are sended, post another request for surveys
                    new getSurveyList(ctx, -1, text_ni_vprasalnikov, seznam, null).execute();
                }
            }).execute();
        }
        //there are no triggered geofences, request for surveys
        else{
            new getSurveyList(ctx, -1, text_ni_vprasalnikov, seznam, null).execute();
        }
    }
}
