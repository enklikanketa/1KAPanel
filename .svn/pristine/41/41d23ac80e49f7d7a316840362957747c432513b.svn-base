package enklikanketa.com.a1kapanel;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.webkit.ConsoleMessage;
import android.webkit.JavascriptInterface;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.Tasks.sendTrakingLocationsTask;

import static enklikanketa.com.a1kapanel.R.id.webView;

/**
 * Created by Uro≈° on 30/11/2015.
 */
public class WebResevanje extends AppCompatActivity {
/*fs tdrtrtusrtusrt*/
    //set webview
    WebView browser;
    boolean identifierAlreadyChecked = false;
    String loc_id = "", system_variables = "";
    //id of input/entry/respondent in server DB
    String server_user_id = null;
    private String TAG = "WebResevanje";
    Database DB;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.web_resevanje);

        getSupportActionBar();

        String link = getString(R.string.feedbackLink);

        Bundle bundle = getIntent().getExtras();
        if(bundle != null && bundle.getString("link") != null &&
                !bundle.getString("link").equals(""))
            link = bundle.getString("link");

        DB = (Database) Database.getInstance(WebResevanje.this);

        setSystemVariables();

        //naslov forme
        //setTitle(naslov_vprasalnika);

        browser = findViewById(webView);
        WebSettings ws = browser.getSettings();
        ws.setLoadsImagesAutomatically(true);
        ws.setJavaScriptEnabled(true);
        browser.setWebChromeClient(new WebChromeClient(){
            @Override
            public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
                Log.d(TAG, "JS console message: "+consoleMessage.message());
                return true;
            }
        });
        ws.setAllowFileAccess(true);
        ws.setDomStorageEnabled(true);
        browser.addJavascriptInterface(new JSInterface(), "JSInterface");
        //browser.loadData("", "text/html", null);
        browser.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
        ws.setBuiltInZoomControls(true);
        browser.loadUrl(link+system_variables);

        ws.setLoadWithOverviewMode(true);
        ws.setUseWideViewPort(true);
        ws.setDisplayZoomControls(false);
        ws.setSupportZoom(true);
        ws.setDefaultTextEncodingName("utf-8");

        browser.setWebViewClient(new WebViewClient() {
            ProgressDialog loader;
            boolean niKonec = true;

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                //Log.v(TAG, "wewe onPageStarted " + url);
                if (loader != null)
                    dismissDialog(WebResevanje.this, loader);

                if (niKonec)
                    //progressdialog when page is loading
                    loader = ProgressDialog.show(WebResevanje.this, "",
                            WebResevanje.this.getResources().getString(R.string.loadPage), true);

                    /*Log.v(TAG, "wewe onPageStarted " + devLink(url));
                    if(isDevLink(url))
                        view.loadUrl(devLink(url));*/
            }

            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                //Log.v(TAG, "wewe shouldOverrideUrlLoading " + url);
                //if this url, survey is ended
                if(identifierAlreadyChecked && server_user_id != null &&
                        loc_id != null && !loc_id.equals("")){
                    ContentValues cv = new ContentValues();
                    cv.put("server_input_id", server_user_id);
                    DB.updateData("locations", cv, "id="+loc_id);
                    new sendTrakingLocationsTask(WebResevanje.this, loc_id).execute();
                    //so the same location is not sended multiple times
                    loc_id = null;
                }
                if (url.equals("https://www.1ka.si/") || url.equals("http://www.1ka.si/")  || url.equals("http://test.1ka.si/") || url.equals(getString(R.string.server_url))) {
                    niKonec = false;
                    dismissDialog(WebResevanje.this, loader);
                    finish();
                    /*if (!isPreview)
                        Toast.makeText(WebResevanje.this, WebResevanje.this.getText(R.string.feedbackSuccess)
                                .toString(), Toast.LENGTH_LONG).show();*/
                } else if (url.equals("https://www.facebook.com/dialog/return/close?#_=_")) {
                    niKonec = false;
                    dismissDialog(WebResevanje.this, loader);
                    finish();
                }
                //add system variables to url
                else{
                    setSystemVariables();
                    view.loadUrl(url+system_variables);
                }

                return false;
            }

            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                //Log.v(TAG, "wewe onPageFinished " + url);
                if (niKonec) {
                    dismissDialog(WebResevanje.this, loader);

                    if(!identifierAlreadyChecked) {
                        /*String[] uporabnik = DB.getRowData("uporabnik",
                                new String[]{"identifier", "id_server"}, null);*/

                        //if (uporabnik != null) {
                            String s = "javascript:" +
                                        /*"if(maza_user_id_element){" +
                                        "var usr_id = document.getElementById('usr_id');" +
                                        "var maza_user_id = document.getElementById('maza_user_id').value = '" + uporabnik[1] + "';" +
                                        "var maza_identifier = document.getElementById('maza_identifier').value = '" + uporabnik[0] + "';" +
                                        "var maza_srv_version = document.getElementById('maza_srv_version').value = '" + srv_version_timestamp + "';" +
                                        "var maza_tgeof_id = document.getElementById('maza_tgeofence_id').value = '" + tgeof_id + "';" +
                                        "var maza_tact_id = document.getElementById('maza_tactivity_id').value = '" + tact_id + "';" +
                                        "var maza_mode = document.getElementById('maza_mode').value = '" + mode + "';" +*/
                                        //"console.log(document.getElementById('maza_user_id'));console.log(document.getElementById('maza_identifier'));" +
                                        //run JS Interface to check if element exist, if yes, identifier has just been checked - set identifierAlreadyChecked to true
                                        "JSInterface.checkElement(_usr_id);";
                                        //"}";

                            //var mora biti nastavljen, ce hocemo da dela
                            view.loadUrl(s);
                        //}
                    }
                }
            }

            @Override
            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                Log.e(TAG, "WebResevanje WebViewClient onReceivedError " + description + " " + failingUrl + " " + errorCode);
            }
        });

        final SwipeRefreshLayout swipeLayout = findViewById(R.id.swiperefresh_webinfo);
        //swipeLayout.setColorSchemeResources(R.color.enkablue);
        swipeLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener()
        {
            @Override
            public void onRefresh()
            {
                //if (Network.checkMobileInternet(WebResevanje.this, true)) {
                    browser.reload();
                //}
                swipeLayout.setRefreshing(false);
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                return true;
            default:
                return true;
        }
    }

    private String devLink(String link){
        //for dev purposes
        if(link != null && link.contains("localhost"))
            link = getString(R.string.server_url)+link.substring(17);
        else if(link != null && link.contains("1ka.test"))
            link = getString(R.string.server_url)+link.substring(16);
        return link;
    }

    private boolean isDevLink(String link){
        return (link != null && (link.contains("localhost") || link.contains("1ka.test")));
    }

    private void setSystemVariables(){
        Bundle bundle = getIntent().getExtras();
        if(bundle != null) {
            String[] uporabnik = DB.getRowData("uporabnik",
                    new String[]{"identifier", "id_server"}, null);

            if (uporabnik != null && !identifierAlreadyChecked) {
                system_variables += uporabnik[1] != null ?
                        "&maza_user_id=" + uporabnik[1] : "";
                system_variables += uporabnik[0] != null ?
                        "&maza_identifier=" + uporabnik[0] : "";

                system_variables += ((bundle.getString("srv_version_timestamp") != null) &&
                        (!bundle.getString("srv_version_timestamp").equals("0"))) ?
                        "&maza_srv_version=" + bundle.getString("srv_version_timestamp") : "";
                system_variables += bundle.getString("tgeof_id") != null &&
                        !bundle.getString("tgeof_id").equals("") ?
                        "&maza_tgeofence_id=" + bundle.getString("tgeof_id") : "";
                system_variables += bundle.getString("tact_id") != null &&
                        !bundle.getString("tact_id").equals("") ?
                        "&maza_tactivity_id=" + bundle.getString("tact_id") : "";
                system_variables += bundle.getString("mode") != null &&
                        !bundle.getString("mode").equals("") ?
                        "&maza_mode=" + bundle.getString("mode") : "";
            }

            system_variables += bundle.getString("lat") != null ?
                    "&latitude=" + bundle.getString("lat") : "";
            system_variables += bundle.getString("lng") != null ?
                    "&longitude=" + bundle.getString("lng") : "";
        }
    }

    //gumb nazaj na telefonu
    /*public void onBackPressed() {
        nazaj();
    }

    //F, ko hoce uporabnik iti nazaj (na MobilneAnkete)
    private void nazaj() {
        //NavUtils.navigateUpFromSameTask(this);
        if (Network.checkMobileInternet(WebResevanje.this, true))
            generalLib.finishNazaj(this);
    }*/

    /**
     * More safe closing or dismissing of dialog
     *
     * @param act    - activity
     * @param dialog - dialog to close or dismiss
     */
    public static void dismissDialog(Activity act, Dialog dialog) {
        try {
            if (((dialog != null) && dialog.isShowing()) && !act.isFinishing()/* || act.isDestroyed()*/) {
                dialog.dismiss();
            }
        } catch (final IllegalArgumentException e) {
            // Handle or log or ignore
        }
    }

    /**
     * JS Interface to check if element exist
     */
    class JSInterface {
        @JavascriptInterface
        public void checkElement(String usr_id) {
            //Log.v(TAG, "wewe usr_id " + usr_id);
            if(usr_id != null){
                identifierAlreadyChecked = true;
                server_user_id = usr_id;
            }
        }
    }
}
