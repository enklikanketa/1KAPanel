package enklikanketa.com.a1kapanel.Libraries;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import enklikanketa.com.a1kapanel.Receivers.AlarmReceiver;
import enklikanketa.com.a1kapanel.System.Database;

import static android.content.Context.ALARM_SERVICE;

/**
 * Created by podkrizniku on 06/12/2017.
 */

public class AlarmLib {

    /**
     * Create and run alarm fo this alarm id/broadcast requsr code
     * If alarm for this id already exists, this will update it, if not it will create it
     * @param ctx context
     * @param data data of alarm/notification
     * @param id id of alamr/sender - request code of broadcast
     */
    public static void setAlarm(Context ctx, Map<String, String> data, int id){
        Intent mintent = new Intent(ctx, AlarmReceiver.class);
        mintent.putExtra("title", data.get("title"));
        mintent.putExtra("message", data.get("message"));
        mintent.putExtra("link", data.get("link"));
        mintent.putExtra("sound", data.get("sound"));
        mintent.putExtra("sender_id", id+"");
        PendingIntent sender = PendingIntent.getBroadcast(ctx, id, mintent, PendingIntent.FLAG_UPDATE_CURRENT);

        AlarmManager alarm1 = (AlarmManager) ctx.getSystemService(ALARM_SERVICE);
        if(alarm1 != null) {
            //current time in millis - add 10 seconds
            long sdl = Calendar.getInstance().getTimeInMillis()+(1000*10);
            alarm1.setRepeating(AlarmManager.RTC_WAKEUP, sdl, 1000 * 60 * Integer.parseInt(data.get("repeat")), sender);
            //alarm1.cancel(sender);
        }
    }

    /**
     * Check if there are alarms in DB, then check if they are running, if not, set them
     * @param ctx - context
     */
    static public void checkAndRunAlarms(Context ctx){
        String[][] alarms = Database.getData(new Database(ctx), "alarms",
                new String[]{"srv_id", "alarm_notif_title", "alarm_notif_message", "alarm_notif_repeat", "alarm_notif_sound", "alarm_id"}, null);

        //are there alarms in DB?
        if(alarms != null)
            for(String[] arr : alarms) {
                //Log.d("1kapanel", "wewe alarm" + Arrays.toString(arr));

                //is alarm for that id not registered yet?
                if(PendingIntent.getBroadcast(ctx, Integer.parseInt(arr[5]),
                        new Intent(ctx, AlarmReceiver.class), PendingIntent.FLAG_NO_CREATE) == null) {

                    //Log.d("1kapanel", "wewe alarm not registered yet " + arr[5]);

                    //get link of survey for this alarm
                    String[] survey = Database.getRowData(new Database(ctx), "surveys",
                            new String[]{"link"}, "id=" + arr[0]);
                    String link = null;
                    if (survey != null)
                        link = survey[0];

                    HashMap<String, String> data = new HashMap<>();
                    data.put("link", link);
                    data.put("title", arr[1]);
                    data.put("message", arr[2]);
                    data.put("sound", arr[4]);
                    data.put("repeat", arr[3]);

                    //set alarm
                    setAlarm(ctx, data, Integer.parseInt(arr[5]));
                }
            }
    }

    /**
     * Set alarm - schedule a series of notifications
     * @param ctx - Context
     * @param data - Data of needed values to show notification
     */
    public static void setOrUpdateNewAlarm(Context ctx, Map<String, String> data){
        //you can get your text message here.
        String link = data.get("link");
        String ank_id = data.get("ank_id");

        ContentValues initialValues = new ContentValues();
        initialValues.put("id",  ank_id);
        initialValues.put("link", link);

        SQLiteOpenHelper DBH = new Database(ctx);

        //insert new survey in DB, if already exists, id is -1
        DBH.getWritableDatabase().insertWithOnConflict("surveys", null, initialValues, SQLiteDatabase.CONFLICT_IGNORE);

        int id;
        //is alarm in DB for that survey
        String[] alarm = Database.getRowData(DBH, "alarms",
                new String[]{"alarm_id"}, "srv_id='"+ank_id+"'");

        //there is alarm in DB for that survey - update it
        if(alarm != null) {
            id = Integer.parseInt(alarm[0]);
            updateAlarmDB(data, alarm[0], DBH);
        }
        //there is no alarm for this survey yet, insert it
        else {
            //get alarm number
            id = GeneralLib.getRandomInt();
            insertAlarmDB(data, id+"", DBH);
        }

        AlarmLib.setAlarm(ctx, data, id);
    }

    private static void insertAlarmDB(Map<String, String> data, String alarm_id, SQLiteOpenHelper DBH){
        //vstavi v tabelo novegi alarm
        Database.insertData(DBH, "alarms", new String[][]{
                {"srv_id", data.get("ank_id")},
                {"alarm_notif_title", data.get("title")},
                {"alarm_notif_message", data.get("message")},
                {"alarm_notif_repeat", data.get("repeat")},
                {"alarm_notif_sound", data.get("sound")},
                {"alarm_id", alarm_id}});
    }

    private static void updateAlarmDB(Map<String, String> data, String alarm_id, SQLiteOpenHelper DBH){
        ContentValues initialValues = new ContentValues();
        initialValues.put("alarm_notif_title",  data.get("title"));
        initialValues.put("alarm_notif_message", data.get("message"));
        initialValues.put("alarm_notif_repeat", data.get("repeat"));
        initialValues.put("alarm_notif_sound", data.get("sound"));
        initialValues.put("alarm_id", alarm_id);

        Database.updateData(DBH, "alarms", initialValues, "srv_id='"+data.get("ank_id")+"'");
    }
}
