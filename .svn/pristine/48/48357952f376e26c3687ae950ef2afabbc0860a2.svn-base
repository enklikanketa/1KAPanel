package com.FDV.hitra1ka;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.FDV.hitra1ka.Adapters.VprasalnikiSimpleAdapter;
import com.FDV.hitra1ka.Libs.generalLib;
import com.FDV.hitra1ka.System.Database;
import com.FDV.hitra1ka.System.Network;
import com.FDV.hitra1ka.System.ServerCommunication;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static com.FDV.hitra1ka.R.id.tip;

class getSurveyList extends AsyncTask<Object, Object, String> {

    Activity ctx;
    private TextView text_ni_vprasalnikov;
    ProgressDialog loader;
    ListView seznam;
    List<HashMap<String, String>> list = new ArrayList<>();
    private int mobile_created, limit;
    private View parent;

    getSurveyList(Activity context, int mobile_created1, int limit1, TextView text_ni_vprasalnikov1,
                  ListView seznam1, View parent1) {

        ctx = context;
        mobile_created = mobile_created1;
        limit = limit1;
        text_ni_vprasalnikov = text_ni_vprasalnikov1;
        seznam = seznam1;
        parent = parent1;
    }

    protected void onPreExecute() {
        super.onPreExecute();
        loader = ProgressDialog.show(ctx, "",
                ctx.getResources().getString(R.string.pridobivanjePodatkov), true);
    }

    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        if (result == null) {
            generalLib.dismissDialog(ctx, loader);
            //preveri, ce je povezava
            //Network.checkMobileInternet(ctx, true);
            Toast.makeText(ctx, ctx.getText(R.string.general_remote_server_error)
                    .toString(), Toast.LENGTH_LONG).show();
        } else if (result.equals("OK")) {
            createSeznam(ctx, seznam, list, mobile_created);
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.GONE);
            seznam.setVisibility(View.VISIBLE);
        } else if (result.equals("empty") || result.equals("[]")) {
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.VISIBLE);
            if (parent != null)
                parent.setVisibility(View.GONE);
            seznam.setVisibility(View.GONE);
        } else {
            generalLib.dismissDialog(ctx, loader);
            if (!generalLib.otherErrors(ctx, result))
                generalLib.reportCrash(new Exception("getSurveyList onPostExecute() has error: "
                        + result), null);
        }

        generalLib.dismissDialog(ctx, loader);
    }

    protected String doInBackground(Object... params) {

        //pobere podatke o uporabniku iz baze
        String[] uporabnik = Database.getData(ctx, "uporabnik",
                new String[]{"uporabnisko_ime", "geslo"}, null);

        // uporabnik prijavljen
        if (uporabnik != null) {
            // poslji
            JSONObject object = new JSONObject();
            JSONObject logIn = new JSONObject();
            String result = null;
            try {
                logIn.put("username", uporabnik[0]);
                logIn.put(uporabnik[1].equals(ctx.getString(R.string.special_login_key))
                        ? "special_login" : "password", uporabnik[1]);

                object.put("Login", logIn);

                result = ServerCommunication.
                        PostSeznamVsehVprasalnikov(ctx, object, null, limit, mobile_created);

                if (result != null) {
                    JSONObject linkobj = new JSONObject(result);

                    if (linkobj.has("error")) {
                        return linkobj.getString("error");
                    } else {
                        JSONArray vprasalniki = linkobj.getJSONArray("surveys");

                        if (vprasalniki.length() > 0) {
                            for (int i = 0; i < vprasalniki.length(); i++) {
                                HashMap<String, String> map = new HashMap<>();
                                JSONObject vprasalnik = new JSONObject(vprasalniki.getJSONObject(i).toString());
                                String ime = generalLib.fromHtml(vprasalnik.get("naslov").toString()).toString();
                                map.put("ime", ime);
                                map.put("ustvarjeno", vprasalnik.get("i_time").toString());
                                map.put("vprasanj", vprasalnik.get("variables").toString());
                                map.put("id", vprasalnik.get("id").toString());
                                map.put("tip", vprasalnik.get("survey_type").toString());
                                map.put("mobile_created", vprasalnik.get("mobile_created").toString());
                                //zacasno, dokler e ne updata api (prvi po 31.8.2017)
                                /*if(vprasalnik.has("approp"))
                                    map.put("enote", vprasalnik.get("approp").toString());
                                else*/
                                    map.put("enote", vprasalnik.get("answers").toString());

                                if (vprasalnik.getInt("answers") == 0 && vprasalnik.getInt("active") == 0)
                                    map.put("active", "-1");
                                else
                                    map.put("active", vprasalnik.get("active").toString());

                                if (!vprasalnik.get("v_time_last").toString().equals("00.00.00 0:00")) {
                                /*if(vprasalnik.get("v_time_first").toString().equals("00.00.00 0:00"))
                                    map.put("zadnjiv", getResources().getString(R.string.vPripravi));
                                else
                                    map.put("zadnjiv", getResources().getString(R.string.zakljucena));*/
                                    map.put("zadnjiv", vprasalnik.get("v_time_last").toString());
                                    map.put("prviv", vprasalnik.get("v_time_first").toString());
                                } else {
                                    map.put("zadnjiv", ctx.getResources().getString(R.string.niOdgovorov));
                                    map.put("prviv", ctx.getResources().getString(R.string.niOdgovorov));
                                }
                                map.put("aktivnost", vprasalnik.get("trajanjeod").toString() +
                                        " - " + vprasalnik.get("trajanjedo").toString());

                                map.put("mobile_created", vprasalnik.get("mobile_created").toString());

                                list.add(map);
                            }
                            return "OK";
                        } else
                            return "empty";
                    }

                }
                //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
                else {
                    //preveri, ce je povezava
                    return null;
                }
            } catch (JSONException e) {
                Log.e("hitra1ka", "getSurveyList onPostExecute(): " + e);
                generalLib.reportCrash(e, result);
                generalLib.dismissDialog(ctx, loader);
                return result;
            }
        }
        // ni prijavljen - gre na prijavo
        else {
            Intent myIntent = new Intent(ctx, vpis.class);
            ctx.startActivity(myIntent);
            generalLib.finishNazaj(ctx);
            return null;
        }
    }

    /**
     * Fills ListView for all questionaires
     *
     * @param ctx             - Activity
     * @param seznam          - ListView - ListView to fill
     * @param vprasalniki     - List<HashMap<String, String>> - data to put in ListView
     * @param mobile_created1 - for adapter - -1 for list for ll surveys, 0 for lifst for web surveys,
     *                        1 for list for mobile surveys
     */

    private void createSeznam(final Activity ctx, ListView seznam,
                              List<HashMap<String, String>> vprasalniki, int mobile_created1) {

        //kateri podatki se rabijo (po vrsti)
        String[] from = new String[]{"ime", "zadnjiv", "enote", "id", "vprasanj",
                "aktivnost", "prviv", "ustvarjeno", "tip", "active", "mobile_created"};
        //v katere textviewe se bodo filali zgornji podatki (po vrsti)
        int[] to = new int[]{R.id.litem_zgoraj, R.id.litem_spodaj, R.id.litem_enote, R.id.id,
                R.id.vprasanj, R.id.aktivnost, R.id.prviv, R.id.ustvarjeno, tip, R.id.active,
                R.id.mobile};

        //nastavi adapter
        VprasalnikiSimpleAdapter adapter = new VprasalnikiSimpleAdapter(
                ctx, vprasalniki, R.layout.list_item_vsi_vprasalniki, from, to, mobile_created1 == 1);
        seznam.setAdapter(adapter);

        //nastavi, ko se item (vprasalnik) izbere v listviewu
        seznam.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
        seznam.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position1, long id) {
                view.setSelected(true);

                Intent myIntent;

                //dobi active
                TextView active = (TextView) view.findViewById(R.id.active);
                //dobi active
                TextView mobile = (TextView) view.findViewById(R.id.mobile);
                //dobi tip
                TextView tip = (TextView) view.findViewById(R.id.tip);
                //dobi id
                TextView id1 = (TextView) view.findViewById(R.id.id);

                //if survey is mobile and not active and not having answers, it can be edited
                if (Integer.valueOf(mobile.getText().toString()) == 1 &&
                        Integer.valueOf(active.getText().toString()) == -1) {

                    if (Integer.valueOf(tip.getText().toString()) == 0)
                        myIntent = new Intent(ctx, EnOdgovorGlasovanje.class);
                    else
                        myIntent = new Intent(ctx, anketa.class);

                }
                //it can not be edited, go to dashboard
                else {
                    myIntent = new Intent(ctx, Dashboard.class);

                    myIntent.putExtra("active", Integer.valueOf(active.getText().toString()));
                    myIntent.putExtra("mobile_created", Integer.valueOf(mobile.getText().toString()));
                }

                myIntent.putExtra("id_vprasalnika", id1.getText().toString());

                if (Network.checkMobileInternet(ctx, true)) {
                    ctx.startActivity(myIntent);
                    generalLib.finishNaprej(ctx, false);
                }
            }
        });
    }// konec createSeznam()
}