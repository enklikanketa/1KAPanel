/*
 * Made by:
 * Uroš Podkrižnik
 * uros.podkriznik(at)gmail.com
 * Tel.: 041829380
 */

package enklikanketa.com.a1kapanel.System;

import android.content.Context;
import android.util.Log;

import org.json.JSONObject;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import enklikanketa.com.a1kapanel.Libraries.GeneralLib;
import enklikanketa.com.a1kapanel.R;

public class ServerCommunication {
    //https://www.1ka.si/ ali http://test.1ka.si/ ali http://192.168.1.101/1ka/ (localhost)

    private Context con;

    public ServerCommunication(Context ctx){
        con = ctx;
    }

    //vpis uporabnika
    public String PostLogin(JSONObject obj) {
        //ce nima slojezik, poslji parameter ang v primeru, da se registrira z drugim jezikom
        String params = null;
        /*if (!(generalLib.getLocale(con) + "").equals("sl_SI"))
            params = "&regFromEnglish=1";*/

        return APIexecutePost(obj, "checkLoginApp", params);
    }

    //Send device info
    public String PostDeviceInfo(JSONObject obj) {
        return APIexecutePost(obj, "mazaUpdateDeviceInfo", null);
    }

    //Send device registration ID
    public String PostRegistrationID(JSONObject obj) {
        return APIexecutePost(obj, "mazaUpdateRegistrationId", null);
    }

    //Send request for alarms
    public String PostGetAlarms(JSONObject obj) {
        return APIexecutePost(obj, "mazaGetAlarms", null);
    }

    //edit nextpin activity
    public String PostNextPinGeoActivityEdit(JSONObject obj, int activity_id, String action) {
        Log.d("1kapanel", "obj "+obj.toString());
        return Network.postNextPinData(con, con.getString(R.string.nextpin_api_url) +
                action + "/" + activity_id, obj);
    }

    //edit nextpin activity
    public String PostNextPinFrequentEdit(JSONObject obj, String action) {
        Log.d("1kapanel", "obj "+obj.toString());
        return Network.postNextPinData(con, con.getString(R.string.nextpin_api_url) +
                action, obj);
    }

    /**
     * Create link and hmac token and post it to server - for API
     *
     * @param obj    - JSONObject - data to send to server
     * @param action - String - action name of API
     * @param params - String - additional params to send in link - null if not set
     * @return String - server answer
     */
    private String APIexecutePost(JSONObject obj, String action, String params) {
        if (Network.checkMobileInternet(con, true)) {

            //create request link
            String request = con.getString(R.string.server_url) +
                    "admin/survey/api/api.php?" + "action=" + action;

            //add aditional params if not null
            if (params != null)
                request += params;

            //Log.v("1kapanel","obj "+obj.toString());

            //create hmac hash
            String hmac = HMAC_SHA256("8e76e16e764f228caa4fa7ed41b03302871910e96b3ba937260b68c89d61ac0a",
                    "POST" + request + obj.toString());

            //return server answer
            return Network.postData(request + "&identifier=mazaApp&token=" + hmac, obj);

        } else
            return null;
    }

    /**
     * Make HMAC SHA256 String of given message
     *
     * @param secret  - String - private key
     * @param message - String - Message to hash
     * @return - String - HMAC SHA256
     */
    private String HMAC_SHA256(String secret, String message) {
        try {
            Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), "HmacSHA256");
            sha256_HMAC.init(secret_key);

            return bytesToHex(sha256_HMAC.doFinal(message.getBytes("UTF-8")));
        } catch (Exception e) {
            //Log.e("1kapanel", "HMAC_SHA256 " + e);
            GeneralLib.reportCrash(e, null);
            return null;
        }
    }

    /**
     * Stringify byte array
     *
     * @param in -byte[] - byte array to stringify
     * @return - String - Stringified bytes
     */
    private String bytesToHex(byte[] in) {
        final StringBuilder builder = new StringBuilder();
        for (byte b : in) {
            builder.append(String.format("%02x", b));
        }
        return builder.toString();
    }
}
