package enklikanketa.com.a1kapanel;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.ProgressBar;

import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.messaging.FirebaseMessaging;

import org.json.JSONException;
import org.json.JSONObject;

import java.lang.ref.WeakReference;

import enklikanketa.com.a1kapanel.Libraries.GeneralLib;
import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.Network;
import enklikanketa.com.a1kapanel.System.ServerCommunication;
import enklikanketa.com.a1kapanel.Tasks.sendGetAlarmsTask;

public class Main extends AppCompatActivity {

    private String TAG = "Main";

    Button poskusiZnovaB;
    ProgressBar progressBar;
    Database DB;
    //do login at app start - false if you dont have api key
    boolean doLogin = true;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.main);

        DB = new Database(this);

        poskusiZnovaB = findViewById(R.id.button_poskusi_znova);
        poskusiZnovaB.setOnClickListener(poskusiZnovaClick);
        progressBar = findViewById(R.id.main_progressBar);
    }

    //gumb poskusi znova
    View.OnClickListener poskusiZnovaClick = new View.OnClickListener() {
        public void onClick(View v) {

            poskusiZnovaB.setVisibility(View.GONE);
            progressBar.setVisibility(View.VISIBLE);

            //preveri, ce je internet - poskusi se logirat
            checkInternet();
        }
    };

    /**
     * Check if connected to web and send login data to server
     */
    private void checkInternet() {
        //preveri, ce je vzpostavljena povezava
        if (Network.checkMobileInternet(Main.this, true)) {
            if(doLogin)
                //poskusi se logirati
                new LoginTask(Main.this).execute();
            else{
                Intent myIntent = new Intent(Main.this, Home.class);
                startActivity(myIntent);
                finish();
            }
        }
        //mobilno omrezje ni dosegljivo
        else {
            poskusiZnovaB.setVisibility(View.VISIBLE);
            progressBar.setVisibility(View.GONE);
        }
    }

    //DEVICE INFO FUNCTIONS
    /**
     * Check if there is new device info (in case OS is updated)
     */
    private boolean newDeviceInfo() {
        //SQLiteDatabase DB = new Database(this).getWritableDatabase();
        //get release from DB
        String[][] release = DB.getPairData("device_info", new String[]{"value"}, "name='release'");
        //if release from DB is not equal to actual, update device info in DB
        if (release != null && !android.os.Build.VERSION.RELEASE.equals(release[0][0])) {
            DB.updateData("device_info", DB.convertToValues(
                    new String[][]{{"value", System.getProperty("os.version") + ""}}), "name='os_version'");
            DB.updateData("device_info", DB.convertToValues(
                    new String[][]{{"value", android.os.Build.VERSION.INCREMENTAL + ""}}), "name='incremental'");
            DB.updateData("device_info", DB.convertToValues(
                    new String[][]{{"value", android.os.Build.VERSION.SDK_INT + ""}}), "name='sdk_int'");
            DB.updateData("device_info", DB.convertToValues(
                    new String[][]{{"value", android.os.Build.VERSION.RELEASE + ""}}), "name='release'");

            return true;
        }
        return false;
    }

    /**
     * Get string of device data
     *
     * @return string for device data ready to put int in textview
     */
    private static String getDeviceInfoString(Context ctx) {
        Database DB = new Database(ctx);
        String s = "";
        String[][] data = DB.getPairData("device_info", new String[]{"name", "value"}, null);
        if (data != null)
            for (String[] row : data)
                s += /*"\n" +*/ row[0] + ": " + row[1] + "; ";

        return s;
    }

    private static class DeviceInfoTask extends AsyncTask<Object, Object, String> {

        //application context cannot be leaked
        private Context ctx;

        /**
         *
         * @param ctx - has to be application context - getApplicationContext()
         */
        DeviceInfoTask (Context ctx){
            this.ctx = ctx;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            //Log.d(TAG, "result di" + result);

            if (result != null) {
                try {
                    JSONObject obj = new JSONObject(result);

                    if (obj.has("note")) {
                        //all ok
                    } else {
                        GeneralLib.reportCrash(new Exception("DeviceInfoTask response not having note"), result);
                    }

                } catch (JSONException e) {
                    //Log.e(TAG, "Main.class onPostExecute(): " + e);
                    GeneralLib.reportCrash(e, result);
                }
            }
            //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
            else {
                GeneralLib.showErrorToUser(ctx, ctx.getString(R.string.general_remote_server_error));
            }
        }

        @Override
        protected String doInBackground(Object... params) {
            return postDeviceInfo(ctx);
        }
    }

    private static String postDeviceInfo(Context ctx) {
        Database DB = new Database(ctx);
        //pobere podatke o uporabniku iz baze
        String[] uporabnik = DB.getRowData("uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // poslji
        JSONObject object = new JSONObject();

        if(uporabnik != null) {
            // uporabnik prijavljen
            try {
                JSONObject logIn = new JSONObject();
                logIn.put("identifier", uporabnik[0]);
                logIn.put("id_server", uporabnik[1]);
                object.put("Login", logIn);

                object.put("deviceInfo", getDeviceInfoString(ctx));

            } catch (JSONException e) {
                //Log.e(TAG, "Or could not parse malformed JSON: \"" + object.toString() + "\"");
                GeneralLib.reportCrash(e, object.toString());
            }

            ServerCommunication SC = new ServerCommunication(ctx);
            return SC.PostDeviceInfo(object);
        }
        return null;
    }
    //END OF FUNCTIONS FOR DEVICE IFNO

    private class LoginTask extends AsyncTask<Object, Object, String> {

        private final WeakReference<Activity> act;

        LoginTask (Activity act){
            this.act = new WeakReference<>(act);
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            //Log.d(TAG, "login result " + result);

            if (result != null && GeneralLib.isActivityValid(act.get())) {
                    try {
                        JSONObject obj = new JSONObject(result);

                        if (obj.has("note")) {
                            if (obj.getString("note").equals("login OK")) {
                                /*if (obj.has("version") && !isLastVersion(obj.getString("version"))
                                        && getString(R.string.server_url).equals(getString(R.string.test_server_url)))
                                    updateVersionAlert();
                                else {*/

                                if(obj.has("identifier") && obj.has("id_server"))
                                    firstLoginWithThisIdentifier(obj.getString("identifier"), obj.getString("id_server"));

                                if((obj.has("update") && obj.getString("update").equals("deviceInfo"))
                                        || newDeviceInfo())
                                    new DeviceInfoTask(act.get().getApplicationContext()).execute();

                                Intent myIntent = new Intent(act.get(), Home.class);
                                startActivity(myIntent);
                                finish();
                                //}
                            }
                        } else {
                            //TODO HANDLE LOGIN ERRORS
                            Log.e(TAG, "Main.class onPostExecute() result: " + result);
                            /*if (obj.has("error")) {
                                if (!generalLib.otherErrors(Main.this, obj.getString("error"))) {
                                    generalLib.reportCrash(new Exception("Main.class onPostExecute() has error: "
                                            + obj.getString("error")), null);
                                }
                            } else
                                generalLib.reportCrash(new Exception("Main.class onPostExecute() has unknown response: "
                                        + result), null);

                            Intent myIntent = new Intent(Main.this, vpis.class);
                            startActivity(myIntent);
                            generalLib.finishNazaj(Main.this);*/
                        }
                    } catch (JSONException e) {
                        //Log.e(TAG, "Main.class onPostExecute(): " + e);
                        GeneralLib.reportCrash(e, result);
                    }
            }
            //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
            else {
                //Log.e(TAG, "Main.class onPostExecute() result is null ");
                if(GeneralLib.isActivityValid(act.get()))
                    GeneralLib.showErrorToUser(act.get(), act.get().getString(R.string.general_remote_server_error));
                /*poskusiZnovaB.setVisibility(View.VISIBLE);
                progressBar.setVisibility(View.GONE);
                Toast.makeText(Main.this, Main.this.getString(com.FDV.1kapanel.R.string.general_remote_server_error)
                        , Toast.LENGTH_LONG).show();*/
            }
        }

        @Override
        protected String doInBackground(Object... params) {
            if (GeneralLib.isActivityValid(act.get()))
                return postLoginMain(act.get());
            else
                return null;
        }
    }

    private String postLoginMain(Context ctx) {
        //pobere podatke o uporabniku iz baze
        String[] uporabnik = DB.getRowData("uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // poslji
        JSONObject object = new JSONObject();

        String identifier = (uporabnik == null) ? "no_identifier" : uporabnik[0];
        String id_server = (uporabnik == null) ? "" : uporabnik[1];

        String refreshedToken = FirebaseInstanceId.getInstance().getToken();
        //Log.d("a1kapanel", "FirebaseInstanceId token: " + refreshedToken);

        //opcijsko, zaenkrat samo za test TODO
        FirebaseMessaging.getInstance().subscribeToTopic("1katest");

        // uporabnik prijavljen
        try {
            JSONObject logIn = new JSONObject();
            logIn.put("identifier", identifier);
            logIn.put("id_server", id_server);
            logIn.put("registration_id", refreshedToken);
            object.put("Login", logIn);

        } catch (JSONException e) {
            //Log.e(TAG, "Or could not parse malformed JSON: \"" + object.toString() + "\"");
            GeneralLib.reportCrash(e, object.toString());
        }

        ServerCommunication SC = new ServerCommunication(ctx);
        return SC.PostLogin(object);
    }

    /**
     * Save user in user table, delete old data
     *
     * @param identifier - identifier of user
     * @param id_server - id of user on server DB
     */
    private void shraniUporabnika(String identifier, String id_server) {

        //ce tabela uporabniki ni prazna, jo pobrise
        if (DB.stejData("uporabnik", null) != 0) {
            DB.deleteAllRows("uporabnik");
        }

        //vstavi v tabelo novega uporabnika
        DB.insertData("uporabnik", new String[][]{
                {"identifier", identifier},
                {"id_server", id_server}});
        /*{"identifier", "1OjI5E8C"},
        {"id_server", "17"}});*/

        /*Intent myIntent = new Intent(vpis.this, Main.class);
        if (Network.checkMobileInternet(vpis.this, true)) {
            startActivity(myIntent);
            generalLib.finishNaprej(vpis.this, true);
        }*/
    }

    /**
     * Procedures to do when user login with new identifier on this device
     *
     * @param identifier - identifier of user
     * @param id_server - id of user on server DB
     */
    private void firstLoginWithThisIdentifier(String identifier, String id_server){
        shraniUporabnika(identifier, id_server);
        //get alarms for surveys of this user
        new sendGetAlarmsTask(this).execute();
    }

    @Override
    protected void onResume() {
        super.onResume();
        checkInternet();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
    }
}
