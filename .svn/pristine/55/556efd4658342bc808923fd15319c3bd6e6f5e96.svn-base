package enklikanketa.com.a1kapanel.Tasks;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import enklikanketa.com.a1kapanel.Adapters.VprasalnikiSimpleAdapter;
import enklikanketa.com.a1kapanel.Libraries.GeneralLib;
import enklikanketa.com.a1kapanel.Models.SurveyList.Survey;
import enklikanketa.com.a1kapanel.Models.SurveyList.SurveyHolder;
import enklikanketa.com.a1kapanel.Models.SurveyList.SwipeToDeleteCallback;
import enklikanketa.com.a1kapanel.R;
import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.ServerCommunication;
import enklikanketa.com.a1kapanel.vpis;

public class getSurveyList extends AsyncTask<Object, Object, String> {

    Activity ctx;
    private TextView text_ni_vprasalnikov;
    ProgressDialog loader;
    RecyclerView seznam;
    List<Survey> surveys = new ArrayList<>();
    VprasalnikiSimpleAdapter adapter;
    private String TAG = "getSurveyList";

    public getSurveyList(Activity context, TextView text_ni_vprasalnikov1,
                         RecyclerView seznam1, VprasalnikiSimpleAdapter adapter) {

        ctx = context;
        text_ni_vprasalnikov = text_ni_vprasalnikov1;
        seznam = seznam1;
        this.adapter = adapter;
    }

    protected void onPreExecute() {
        super.onPreExecute();
        loader = ProgressDialog.show(ctx, "",
                ctx.getResources().getString(R.string.gathering_data_progress), true);
    }

    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        if (result == null) {
            GeneralLib.dismissDialog(ctx, loader);
            //preveri, ce je povezava
            //Network.checkMobileInternet(ctx, true);
            Toast.makeText(ctx, ctx.getText(R.string.general_remote_server_error)
                    .toString(), Toast.LENGTH_LONG).show();
        } else if (result.equals("OK")) {
            attachAdapter();
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.GONE);
            seznam.setVisibility(View.VISIBLE);
        } else if (result.equals("empty") || result.equals("[]")) {
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.VISIBLE);
            seznam.setVisibility(View.GONE);
        } else {
            GeneralLib.dismissDialog(ctx, loader);
            //if (!GeneralLib.otherErrors(ctx, result))
            GeneralLib.reportCrash(new Exception("getSurveyList onPostExecute() has error: "
                    + result), null);
        }

        GeneralLib.dismissDialog(ctx, loader);
    }

    protected String doInBackground(Object... params) {
        //pobere podatke o uporabniku iz baze
        Database DB = (Database) Database.getInstance(ctx);
        String[] uporabnik = DB.getRowData("uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // uporabnik prijavljen
        if (uporabnik != null) {
            // poslji
            JSONObject object = new JSONObject();
            JSONObject logIn = new JSONObject();
            String result = null;
            try {
                logIn.put("identifier", uporabnik[0]);
                logIn.put("id_server", uporabnik[1]);
                object.put("Login", logIn);
                object.put("timeZone", Calendar.getInstance().getTimeZone().getID());

                ServerCommunication SC = new ServerCommunication(ctx);
                result = SC.PostGetSurveyList(object);

                if (result != null) {
                    JSONArray vprasalniki = new JSONArray(result);

                    if (vprasalniki.length() > 0) {
                        for (int i = 0; i < vprasalniki.length(); i++) {
                            JSONObject vprasalnik = new JSONObject(vprasalniki.getJSONObject(i).toString());
                            String mode = vprasalnik.has("mode") ? vprasalnik.getString("mode") : "";
                            String name = vprasalnik.has("mode") && mode.equals("entry") ?
                                    ctx.getString(R.string.data_entry)+": " :
                                    (vprasalnik.has("name") && !vprasalnik.getString("name").equals("null") ?
                                    vprasalnik.getString("name")+"\n" :
                                    (vprasalnik.has("address") ? vprasalnik.getString("address")+"\n" : ""));
                            String ime = GeneralLib.fromHtml(vprasalnik.getString("naslov")).toString();

                            Survey survey = new Survey();
                            survey.setListItemTop(ime);
                            survey.setListItemBottom(name+vprasalnik.getString("srv_version"));
                            survey.setStatus(vprasalnik.getString("status"));
                            survey.setVerDatetime(vprasalnik.getString("datetime"));
                            survey.setTGeoId(vprasalnik.has("tgeof_id") ? vprasalnik.getString("tgeof_id") : null);
                            survey.setTActId(vprasalnik.has("tact_id") ? vprasalnik.getString("tact_id") : null);
                            survey.setMode(mode);
                            survey.setLatitude(vprasalnik.has("latitude") && !vprasalnik.getString("latitude").equals("null") ?
                                    vprasalnik.getString("latitude") : null);
                            survey.setLongitude(vprasalnik.has("longitude") && !vprasalnik.getString("longitude").equals("null") ?
                                    vprasalnik.getString("longitude") : null);
                            survey.setSrvVersion(vprasalnik.getString("srv_version"));
                            survey.setLink(vprasalnik.get("link").toString());
                            survey.setSrvId(vprasalnik.getString("srv_id"));
                            survey.setUserId(vprasalnik.getString("srv_user_id"));
                            surveys.add(survey);
                        }

                        Collections.sort(surveys, new Comparator<Survey>()
                        {
                            @Override
                            public int compare(Survey lhs, Survey rhs) {
                                return Integer.valueOf(lhs.getSrvId()).compareTo(Integer.valueOf(rhs.getSrvId()));
                            }
                        });


                        return "OK";
                    } else
                        return "empty";

                }
                //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
                else {
                    //preveri, ce je povezava
                    return null;
                }
            } catch (JSONException e) {
                Log.e(TAG, "getSurveyList onPostExecute(): " + e);
                GeneralLib.reportCrash(e, result);
                GeneralLib.dismissDialog(ctx, loader);
                return result;
            }
        }
        // ni prijavljen - gre na prijavo
        else {
            Intent myIntent = new Intent(ctx, vpis.class);
            ctx.startActivity(myIntent);
            //GeneralLib.finishNazaj(ctx);
            ctx.finish();
            return null;
        }
    }

    private void attachAdapter(){
        if(adapter == null){
            //nastavi adapter
            adapter = new VprasalnikiSimpleAdapter(
                    ctx, R.layout.list_item_vprasalniki, surveys);
            seznam.setAdapter(adapter);
        }
        else
            adapter.changeDataAll(surveys);

        ItemTouchHelper itemTouchhelper = new ItemTouchHelper(new SwipeToDeleteCallback(ctx) {
            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int i) {
                final int position = viewHolder.getAdapterPosition();
                Survey survey = ((SurveyHolder)viewHolder).getSurvey();
                showDeleteUnitAlert(survey, position);
            }
        });
        itemTouchhelper.attachToRecyclerView(seznam);
    }

    /**
     * Show alert dialog to delete answer
     * @param survey - survey from Survey class
     * @param position - position of item in adapter/recyclerview
     */
    private void showDeleteUnitAlert(final Survey survey, final int position){
        final String mode = survey.getMode();
        final String user_id = survey.getUserId();
        final String srv_id = survey.getSrvId();
        String zgoraj = survey.getZgoraj();
        String spodaj = survey.getSpodaj();

        String title, desc;
        if(mode.equals("entry")){
            title = ctx.getString(R.string.unit_delete_alert_title_entry);
            desc = ctx.getString(R.string.unit_delete_alert_desc_entry);
        }
        else {
            title = ctx.getString(R.string.unit_delete_alert_title);
            desc = ctx.getString(R.string.unit_delete_alert_desc);
        }

        final AlertDialog myDialog = new AlertDialog.Builder(ctx)
                .setTitle(title)
                .setMessage(desc+zgoraj+", "+spodaj)
                .setNegativeButton(R.string.location_delete_alert_no, null)
                .setPositiveButton(R.string.location_delete_alert_yes, null)
                .setCancelable(false)
                .create();

        myDialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                Button btne = myDialog.getButton(AlertDialog.BUTTON_NEGATIVE);
                btne.setOnClickListener(new View.OnClickListener() {

                    @Override
                    public void onClick(View view) {
                        adapter.notifyItemChanged(position);
                        myDialog.dismiss();
                    }
                });

                Button btpo = myDialog.getButton(AlertDialog.BUTTON_POSITIVE);
                btpo.setOnClickListener(new View.OnClickListener() {

                    @Override
                    public void onClick(View view) {
                        myDialog.dismiss();
                        new sendDeleteSrvUnit(ctx, srv_id, user_id, mode, adapter, position).execute();
                    }
                });
            }
        });
        myDialog.show();
    }
}