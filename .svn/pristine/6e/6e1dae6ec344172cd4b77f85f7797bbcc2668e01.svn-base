package enklikanketa.com.a1kapanel.Receivers;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;

import org.json.JSONArray;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;

import enklikanketa.com.a1kapanel.Libraries.NotificationLib;
import enklikanketa.com.a1kapanel.System.Database;

/**
 * Created by podkrizniku on 27/11/2017.
 */

public class AlarmReceiver extends BroadcastReceiver {
    private String TAG = "AlarmReceiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        //if (isInHourRange(900, 2100)) {
        //checkes whether the current time is between 14:49:00 and 20:11:13.

        Bundle bundle = intent.getExtras();
        HashMap<String, String> data = new HashMap<>();
        if (bundle != null) {
            //get data of repeater
            HashMap<String, String> repeater = new Database(context).getRowHashMapData("repeaters",
                    new String[]{"repeat_by", "time_in_day", "day_in_week", "every_which_day", "timestamp_last_check"},
                    "srv_id=" + data.get("srv_id"));

            String[] repeaterrow = new Database(context).getRowData("repeaters",
                    new String[]{"repeat_by", "time_in_day", "day_in_week", "every_which_day", "timestamp_last_check"},
                    "srv_id=" + data.get("srv_id"));

            Log.d(TAG, "wewe repeaterrow "+ Arrays.toString(repeaterrow));

            /////////////////todo ali je od timestamp_last_check do zdaj ze kaksna nova verzija?
            if(repeater != null)
                countSurveysFromLastCheck(repeater);

            data.put("link", bundle.getString("link"));
            data.put("title", bundle.getString("title"));
            data.put("message", bundle.getString("message"));
            data.put("sound", bundle.getString("sound"));
            data.put("sender_id", bundle.getString("sender_id"));
        }
        NotificationLib nlib = new NotificationLib(context);
        nlib.showNotificationSurvey(data);
        //}
    }

    /**
     * Create and run alarm fo this alarm id/broadcast requsr code
     * If alarm for this id already exists, this will update it, if not it will create it
     *
     * @param data data of alarm
     */
    private void countSurveysFromLastCheck(HashMap<String, String> data) {
        long triggerAtMillis = 0, intervalMillis = 0, oneDayMillis = 86400000, oneWeekMillis = 604800000;
        long timestamp_last_check = Long.valueOf(data.get("timestamp_last_check"));
        long timestamp_now = System.currentTimeMillis()/1000;

        //get current time in HHmm string
        SimpleDateFormat sdf = new SimpleDateFormat("HHmm");
        String currentTime = sdf.format(new Date());

        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(timestamp_last_check*1000);
        String currentTimec = sdf.format(cal);
        Log.d(TAG, "wewe currentTimec "+currentTimec);

        switch (data.get("repeat_by")) {
            case "everyday":
                long timestamp_temp = timestamp_last_check;
                ArrayList<String> time_ind_day_arr = jsonStringToArray(data.get("time_in_day"));
                /*while (timestamp_temp < timestamp_now) {

                }*/
                break;
            /*case "daily":
                int every_which_day = Integer.valueOf(data.get("every_which_day"));
                //get millis to trigger alarm
                triggerAtMillis = millisToTimeInDay(currentTime, data.get("time_in_day")) + (every_which_day * oneDayMillis);
                //24 hours * every_which_day in ms
                intervalMillis = oneDayMillis * every_which_day;
                break;
            case "weekly":
                //which day in week is today
                int dayInWeek = Calendar.getInstance().get(Calendar.DAY_OF_WEEK);
                //convert start of week from sunday to monday
                dayInWeek = (dayInWeek != 1) ? dayInWeek - 1 : 7;

                //how many days is from today to alarm day of week (days rounded up)
                int daysToAdd = (Integer.valueOf(data.get("day_in_week")) - dayInWeek + 7) % 7;

                //if time of day is not reachable today, subtract one day - If now is Monday and 15:00
                //and alarm must be triggered at Thursday at 11:00, alarm must be first triggered
                //in 2 days (2*24 hours) + 20 hours (from monday to thursday is 3 days)
                if (!isTimeReachableToday(currentTime, data.get("time_in_day"))) {
                    //if alarm is for today and we are past this time, alarm has to start in 6 days + rest of time
                    if (daysToAdd == 0)
                        daysToAdd = 6;
                        //remove a day, we are past this time
                    else
                        daysToAdd--;
                }

                //get millis to trigger alarm
                triggerAtMillis = millisToTimeInDay(currentTime, data.get("time_in_day")) + (daysToAdd * oneDayMillis);

                //one week in ms
                intervalMillis = oneWeekMillis;
                break;*/
        }

    }

    ArrayList<String> jsonStringToArray(String jsonString) {
        ArrayList<String> stringArray = new ArrayList<String>();
        try {
            JSONArray jsonArray = new JSONArray(jsonString);

            for (int i = 0; i < jsonArray.length(); i++) {
                stringArray.add(jsonArray.getString(i));
            }

            Collections.sort(stringArray);
        }catch (Exception e){
            Log.e(TAG, "AlarmReceiver.jsonStringToArray Exception: "+e);
            //GeneralLib.reportCrash(e, null);
        }

        return stringArray;
    }

    /**
     * Check if now is in range in from - to hour (ex. 800 is 8:00; 840 is 8:40)
     *
     * @param from - start time hour*100 + minutes
     * @param to   - end time hour*100 + minutes
     * @return true if now is in range, false otherwise
     */
    private boolean isInHourRange(int from, int to) {
        Date date = new Date();
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        int t = c.get(Calendar.HOUR_OF_DAY) * 100 + c.get(Calendar.MINUTE);
        return to > from && t >= from && t <= to || to < from && (t >= from || t <= to);
    }
}
