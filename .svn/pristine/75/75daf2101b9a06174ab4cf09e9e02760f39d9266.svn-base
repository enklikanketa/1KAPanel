package enklikanketa.com.a1kapanel.Receivers;

import android.app.IntentService;
import android.content.Intent;
import android.util.Log;

import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.GeofencingEvent;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import enklikanketa.com.a1kapanel.Libraries.GeofencingLib;
import enklikanketa.com.a1kapanel.Libraries.NotificationLib;
import enklikanketa.com.a1kapanel.R;
import enklikanketa.com.a1kapanel.System.Database;

public class GeofenceTransitionsIS extends IntentService {
    private String TAG = "GeofenceTransitionsIS";
    GeofencingLib gLib;

    public GeofenceTransitionsIS() {
        super("GeofenceTransitionsIS");
    }

    protected void onHandleIntent(Intent intent) {
        gLib = new GeofencingLib(this);
        GeofencingEvent geofencingEvent = GeofencingEvent.fromIntent(intent);
        if (geofencingEvent.hasError()) {
            String errorMessage = gLib.getErrorString(this,
                    geofencingEvent.getErrorCode());
            Log.e(TAG, errorMessage);
            return;
        }

        // Get the transition type.
        int geofenceTransition = geofencingEvent.getGeofenceTransition();

        // Test that the reported transition was of interest.
        if (geofenceTransition == Geofence.GEOFENCE_TRANSITION_ENTER ||
                geofenceTransition == Geofence.GEOFENCE_TRANSITION_EXIT ||
                geofenceTransition == Geofence.GEOFENCE_TRANSITION_DWELL) {

            // Get the transition details as a String.
            /*String geofenceTransitionDetails = getGeofenceTransitionDetails(
                    geofenceTransition, geofencingEvent.getTriggeringGeofences());*/

            // Get the geofences that were triggered. A single event can trigger
            // multiple geofences.
            executeTriggeedGeofences(geofencingEvent.getTriggeringGeofences(), getTransitionString(geofenceTransition));
        } else {
            // Log the error.
            Log.e(TAG, getString(R.string.geofence_transition_invalid_type,
                    geofenceTransition));
        }
    }

    /**
     * Execute procces when geofence is triggered (show notification ect)
     * @param triggeringGeofences - arraylist of geofences that were triggered
     * @param TD - transaction details of geofence
     */
    private void executeTriggeedGeofences(List<Geofence> triggeringGeofences, String TD){
        //iterate trough all triggering geofences
        for (Geofence geofence : triggeringGeofences) {
            //get id of geofence
            String id = getGeofenceIDFromRequestID(geofence.getRequestId());
            //check if geofence with that id exists in DB
            Database DBH = (Database) Database.getInstance(this);
            int checkid = DBH.stejData("geofences", "id="+id);
            //if exists, show notification
            if(checkid > 0){
                showNotification(id, TD);
            }
            //if geofence with this id does not exists, remove it from register
            else{
                ArrayList<String> geofences_ids = new ArrayList<>();
                geofences_ids.add(id);
                gLib.removeGeofences(geofences_ids);
            }

        }
    }

    /**
     * Get ID of geofence from its requestID
     * @param requestID - requestID of geofence
     * @return id of geofence (in DB - whitout prefix)
     */
    private String getGeofenceIDFromRequestID(String requestID){
        int prefix_length = getString(R.string.geofence_id_prefix).length();
        return requestID.substring(prefix_length);
    }

    /**
     * Gets transition details and returns them as a formatted string.
     *
     * @param geofenceTransition    The ID of the geofence transition.
     * @param triggeringGeofences   The geofence(s) triggered.
     * @return                      The transition details formatted as String.
     */
    /*private String getGeofenceTransitionDetails(
            int geofenceTransition,
            List<Geofence> triggeringGeofences) {

        String geofenceTransitionString = getTransitionString(geofenceTransition);

        // Get the Ids of each geofence that was triggered.
        ArrayList<String> triggeringGeofencesIdsList = new ArrayList<>();
        for (Geofence geofence : triggeringGeofences) {
            triggeringGeofencesIdsList.add(geofence.getRequestId());
        }
        String triggeringGeofencesIdsString = TextUtils.join(", ",  triggeringGeofencesIdsList);

        return geofenceTransitionString + ": " + triggeringGeofencesIdsString;
    }*/

    /**
     * Maps geofence transition types to their human-readable equivalents.
     *
     * @param transitionType    A transition type constant defined in Geofence
     * @return                  A String indicating the type of transition
     */
    private String getTransitionString(int transitionType) {
        switch (transitionType) {
            case Geofence.GEOFENCE_TRANSITION_ENTER:
                return getString(R.string.geofence_transition_entered);
            case Geofence.GEOFENCE_TRANSITION_DWELL:
                return getString(R.string.geofence_transition_dwell);
            case Geofence.GEOFENCE_TRANSITION_EXIT:
                return getString(R.string.geofence_transition_exited);
            default:
                return getString(R.string.unknown_geofence_transition);
        }
    }

    private void showNotification(String id, String TD){
        HashMap<String, String> data = new HashMap<>();

        Database DB = (Database) Database.getInstance(this);
        //get data of repeater
        HashMap<String, String> geofence = DB.getRowHashMapData("geofences", null,
                "id=" + id);
        String[] link = DB.getRowData("surveys", new String[]{"link"},
                "id=" + geofence.get("srv_id"));

        if (!geofence.isEmpty()) {
            data.put("link", link[0]);
            //data.put("link", bundle.getString("link"));
            data.put("title", TD);
            data.put("message", geofence.get("address"));
            data.put("sound", "0");
            data.put("sender_id", null);

            //show notification
            NotificationLib nlib = new NotificationLib(this);
            nlib.showNotificationSurvey(data);
        }
    }
}