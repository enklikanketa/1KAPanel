package enklikanketa.com.a1kapanel;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import net.nextpin.geolib.NextPin;
import net.nextpin.geolib.types.GeoActivity;
import net.nextpin.geolib.types.GeoPrediction;
import net.nextpin.geolib.types.GeoRecord;
import net.nextpin.geolib.types.GetLocName;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * Shows data for one day
 * Created by lukab on 2/27/2016.
 */
public class OneDayFragment extends Fragment implements
        NextPin.GeoActivityReceiver, NextPin.GeoPredictionReceiver,
        NextPin.GeoLocNameReceiver
{
    public static final String ARG_DATE = "OneDayFragment.ARG_DATE";
    public static final String ARG_DAY_OFFSET = "OneDayFragment.ARG_DAY_OFFSET";
    private static final String TAG = "OneDayFragment";

    private TextView tvDate;
    private TextView tvProblem;
    private ImageView latestActImg;
    private TextView tvPermissionsProblem;
    private LinearLayout llGeoActivities;
    private LinearLayout llGeoPredictions;
    private RelativeLayout rlWaitingBar;
    ArrayList<GeoPrediction> arGeoPrediction;
    float widthPosition;
    CanvasView canvasView;
    DateFormat dateFormat = DateFormat.getDateInstance();

    private DialogUserActivity dialog_ua = null;

    private Calendar date;
    private int dayOffset;
    private boolean needsUpdate = true;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        dayOffset = getArguments().getInt(ARG_DAY_OFFSET);
        date = Calendar.getInstance();
        date.add(Calendar.DAY_OF_MONTH, -dayOffset);
        arGeoPrediction=new ArrayList<>();
        Log.d(TAG,"OneDayFragment created. Got argument ARG_DAY_OFFSET: "+
                dayOffset);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        ViewGroup rootView = (ViewGroup) inflater.inflate(
                R.layout.fragment_one_day, container, false);
        tvDate = (TextView)rootView.findViewById(R.id.tvDate);
        tvProblem = (TextView)rootView.findViewById(R.id.tvProblem);
        tvPermissionsProblem =
                (TextView)rootView.findViewById(R.id.tvPermissionsProblem);
        tvPermissionsProblem.setMovementMethod(
                LinkMovementMethod.getInstance());
        tvPermissionsProblem.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                NextPin.requestPermissions(getActivity());
            }
        });
        llGeoPredictions =
                (LinearLayout)rootView.findViewById(R.id.llGeoPredictions);
        llGeoActivities =
                (LinearLayout)rootView.findViewById(R.id.llGeoActivites);
        rlWaitingBar =
                (RelativeLayout) rootView.findViewById(R.id.rlWaitingBar);
        canvasView= (CanvasView) rootView.findViewById(R.id.signature_canvas);
        canvasView.setVisibility(View.GONE);
        return rootView;
    }//onCreateView

    @Override
    public void onResume() {
        super.onResume();
        //check whether all permissions are intact
        String missingPermissionsStr =
                NextPin.checkForMissingPermissions(getActivity());
        if (!"".equals(missingPermissionsStr)){
            Log.d(TAG,"Problem with permissions!");
            tvPermissionsProblem.setVisibility(View.VISIBLE);
            missingPermissionsStr+= " <a href=\"#\">Click Here</a>";
            tvPermissionsProblem.setText(Html.fromHtml(missingPermissionsStr));
        }
        else{
            //if the permissions are ok now, remove this view.
            tvPermissionsProblem.setVisibility(View.GONE);
        }
        Calendar now = Calendar.getInstance();
        now.add(Calendar.DAY_OF_MONTH, -dayOffset);
        //if it's today, or the date that was previously used for the same
        // offset is not valid anymore (was yesterday's date)
        if (needsUpdate
                || dayOffset == 0
                || now.get(Calendar.DAY_OF_MONTH) !=
                date.get(Calendar.DAY_OF_MONTH))
        {
            date = now;
            rlWaitingBar.setVisibility(View.VISIBLE);
            tvDate.setText(dateFormat.format(date.getTime()));
            updateActivitiesForSetDate();
        }
    }//onResume

    /**
     * sets the icon of latest activity based on the current ge-activity
     * @param act
     */
    public void setCurrentActivity(GeoRecord.NextPinSensorActivity act){
        if (latestActImg != null) {
            setIconActivity(latestActImg, act);
        }
    }

    public void setIconActivity(ImageView image,
                                GeoRecord.NextPinSensorActivity act){
        if(act == GeoRecord.NextPinSensorActivity.IN_VEHICLE)
        {
            image.setImageResource(R.drawable.vehicle);
        }
        else if(act == GeoRecord.NextPinSensorActivity.ON_BICYCLE)
        {
            image.setImageResource(R.drawable.bike);
        }
        else if(act == GeoRecord.NextPinSensorActivity.ON_MOTORBIKE)
        {
            image.setImageResource(R.drawable.motorbike);
        }
        else if(act == GeoRecord.NextPinSensorActivity.RUNNING)
        {
            image.setImageResource(R.drawable.running);
        }
        else if(act == GeoRecord.NextPinSensorActivity.ON_FOOT ||
                act == GeoRecord.NextPinSensorActivity.WALKING)
        {
            image.setImageResource(R.drawable.walking);
        }
        else if(act == GeoRecord.NextPinSensorActivity.STILL)
        {
            //still make it walking icon when on path (looks better)
            image.setImageResource(R.drawable.still);
        }
        else if(act == GeoRecord.NextPinSensorActivity.TILTING) {
            image.setImageResource(R.drawable.tilting);
        }
        else if(act == GeoRecord.NextPinSensorActivity.UNKNOWN) {
            image.setImageResource(R.drawable.question);
        }
        else if(act == GeoRecord.NextPinSensorActivity.IN_CAR) {
            image.setImageResource(R.drawable.car);
        }
        else if(act == GeoRecord.NextPinSensorActivity.IN_BUS) {
            image.setImageResource(R.drawable.bus);
        }
        else if(act == GeoRecord.NextPinSensorActivity.ON_TRAIN) {
            image.setImageResource(R.drawable.train);
        }
        else{
            image.setImageResource(R.drawable.question);
        }
    }

    /**
     * Triggers an API call to retrieve activities for currently set date.
     * The results will appear in receiveGeoActivities
     * */
    public void updateActivitiesForSetDate(){
        tvDate.setText(dateFormat.format(date.getTime()));
        rlWaitingBar.setVisibility(View.VISIBLE);
        NextPin.getNextPinInstance(getActivity()).getGeoActivities(this, date);
    }//updateActivitiesForSetDate

    public static boolean isSameDay(Date date1, Date date2) {
        if (date1 == null || date2 == null) {
            throw new IllegalArgumentException("The dates must not be null");
        }
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(date1);
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);
        return isSameDay(cal1, cal2);
    }

    public static boolean isSameDay(Calendar cal1, Calendar cal2) {
        if (cal1 == null || cal2 == null) {
            throw new IllegalArgumentException("The dates must not be null");
        }
        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
           cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
           cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
    }

    public static float convertDpToPixel(float dp, Context context){
        Resources resources = context.getResources();
        DisplayMetrics metrics = resources.getDisplayMetrics();
        float px = dp * ((float)metrics.densityDpi /
                DisplayMetrics.DENSITY_DEFAULT);
        return px;
    }

    public static boolean isToday(Date date) {
        return isSameDay(date, Calendar.getInstance().getTime());
    }

    /**
     * Receives geoActivities for the date currently set in the fragment. This
     * method will be called as a consequence of updateActivitiesForSetDate
     * above
     * @param _activities
     */
    @Override
    public void receiveGeoActivities(List<GeoActivity> _activities) {
        //remove all previous activity views if any
        llGeoActivities.removeAllViews();

        needsUpdate = false;
        Activity contextAct = getActivity();
        if (contextAct == null){
            Log.w(TAG, "Fragment is no logner valid!");
            return;
        }

        if (_activities == null || _activities.size()== 0){
            Log.e(TAG,"Err. Activities null or empty!");
            tvProblem.setVisibility(View.VISIBLE);
            if(canvasView!=null) {
                llGeoPredictions.removeAllViews();
                canvasView.setLines(0);
                canvasView.invalidate();
                canvasView.setVisibility(View.GONE);
            }
            if (_activities == null) {
                tvProblem.setText(getString(R.string.err_retrieving_geo_act));
                Log.e(TAG,"Err. Activities null!");
            }
            else{
                tvProblem.setText(getString(R.string.wrn_no_geo_act));
                Log.e(TAG,"Err. Activities empty!");
            }
            return;
        }

        GeoActivity lastStayPoint=null;
        //if it come to here, then apparently there are activities and no
        // problem
        tvProblem.setVisibility(View.GONE);

        //loop from very first towards last
        int firstIdx = _activities.size()-1;
        for (int iAct = firstIdx; iAct>=0; iAct--){
            final GeoActivity geoAct = _activities.get(iAct);

            if(geoAct.getType() == GeoActivity.Type.STAYPOINT){
                if(lastStayPoint == null ||
                   geoAct.getEndTimestamp()- lastStayPoint.getEndTimestamp()>0)
                {
                    lastStayPoint = geoAct;
                }
            }//if staypoint
            View activityView = LayoutInflater.from(this.getActivity()).
                    inflate(R.layout.geo_activity_view, llGeoActivities, false);

            TextView tvStart =
                    (TextView)activityView.findViewById(R.id.tvGeoActStart);
            TextView tvEnd =
                    (TextView)activityView.findViewById(R.id.tvGeoActEnd);
            TextView tvLocName =
                    (TextView)activityView.findViewById(R.id.tvLocationName);
            LinearLayout llType =
                    (LinearLayout)activityView.findViewById(R.id.llTypeBar);
            llType.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View view) {
                    int activity_id = geoAct.getActivityId();

                    if(dialog_ua != null)
                        dialog_ua.dismiss();

                    AppCompatActivity activity = (AppCompatActivity) getActivity();

                    dialog_ua = new DialogUserActivity(activity, R.style.DialogUserActivity, activity_id,
                            new DialogUserActivity.TaskListener() {
                                @Override
                                public void onFinished(String result) {
                                    updateActivitiesForSetDate();
                                }
                            });
                    dialog_ua.setTitle(getString(R.string.dialog_title_edit_activity));
                    dialog_ua.show();

                    return true;
                }
            });
            LinearLayout llGeoActivity =
                    (LinearLayout)activityView.findViewById(R.id.llGeoActivity);

            ImageView imgPin =
                    (ImageView)activityView.findViewById(R.id.imgPin);
            if (iAct == firstIdx && isToday(date.getTime())){
                latestActImg = imgPin;
            }

            //set height based on the duration
            int durationInMins = (int)geoAct.getDurationInDay(date)/1000/60;
            durationInMins = durationInMins/3;//3 min is 1 dp
            if (durationInMins < 30) durationInMins = 40;
            ViewGroup.LayoutParams params = llGeoActivity.getLayoutParams();
            //convert dp to pixels
            int height = (int) TypedValue.applyDimension(
                    TypedValue.COMPLEX_UNIT_DIP, durationInMins,
                    getResources().getDisplayMetrics());
            params.height = height;
            llGeoActivity.setLayoutParams(params);

            tvStart.setText(geoAct.getStartTimeInDayStr(date));
            tvEnd.setText(geoAct.getEndTimeInDayStr(date));

            if (geoAct.getType() == GeoActivity.Type.PATH){
                LinearLayout.LayoutParams params2 =
                        (LinearLayout.LayoutParams)llType.getLayoutParams();
                //set the icon
                setIconActivity(imgPin,geoAct.getSensorActivity());

                //convert dp to pixels
                int width = (int) TypedValue.applyDimension(
                        TypedValue.COMPLEX_UNIT_DIP, 22,
                        getResources().getDisplayMetrics());
                int margin = (int) TypedValue.applyDimension(
                        TypedValue.COMPLEX_UNIT_DIP, 9,
                        getResources().getDisplayMetrics());

                params2.width = width;
                params2.setMargins(margin, params2.topMargin, 0, 0);
                llType.setLayoutParams(params2);

                llType.setBackgroundColor(ContextCompat.getColor(getActivity(),
                        R.color.colorMobisRed));
            }

            llGeoActivities.addView(activityView);
            tvLocName.setText(geoAct.getName());
            widthPosition= convertDpToPixel(80,getActivity());
        }//for all daily activities
        //last activities
        if(lastStayPoint!=null&&isToday(date.getTime())){
            NextPin.getNextPinInstance(getActivity()).getGeoPrediction(this,
                    lastStayPoint.getLocationId());
        }
        else{
            llGeoPredictions.removeAllViews();
            canvasView.setLines(0);
            canvasView.invalidate();
            rlWaitingBar.setVisibility(View.GONE);
            canvasView.setVisibility(View.GONE);
        }
    }//receiveGeoActivities

    private void drawPredictions(GeoPrediction _predictions){
        View activityView = LayoutInflater.from(this.getActivity()).
                inflate(R.layout.geo_prediction_view, llGeoPredictions, false);

        TextView probability=
                (TextView) activityView.findViewById(R.id.tvPredictionProcent);
        TextView time= (TextView) activityView.findViewById(R.id.tvTime);
        TextView locationName=
                (TextView) activityView.findViewById(R.id.tvLocationName);
        LinearLayout linearLayout=
                (LinearLayout) activityView.findViewById(R.id.llTypeBar);
        linearLayout.setAlpha((float) (_predictions.getProbability()*2.0f));

        NumberFormat formatter = new DecimalFormat("#0");
        probability.setText(
                formatter.format(_predictions.getProbability()*100)+"% ");

        int hours = (int) _predictions.getTimeToJump() / 3600;
        int remainder = (int) _predictions.getTimeToJump() - hours * 3600;
        int mins = remainder / 60;
        time.setText("in " +
                ((hours > 0) ? hours + "h " : "") +
                ((mins > 0) ? mins + "m " : "" + ""));
        if(_predictions.getNameLocation()!=null)
            if(_predictions.getNameLocation().equals(""))
                locationName.setText(_predictions.getJumpTo()+"");
            else
                locationName.setText(_predictions.getNameLocation()+"");
        llGeoPredictions.addView(activityView);

    }

    @Override
    public void receiveGeoPrediction(List<GeoPrediction> _predictions) {

        arGeoPrediction=new ArrayList<>();
        llGeoPredictions.removeAllViews();
        canvasView.setLines(0);
        canvasView.invalidate();
        canvasView.setVisibility(View.VISIBLE);
        rlWaitingBar.setVisibility(View.GONE);
        Activity act = getActivity();
        if (act == null){
            Log.w(TAG, "Fragment is no logner valid!");
            return;
        }
        if (_predictions == null){
            rlWaitingBar.setVisibility(View.GONE);
            canvasView.setVisibility(View.GONE);
            Log.d(TAG, "Err. Predictions null!");
            return;
        }
        else if (_predictions.size()== 0){
            rlWaitingBar.setVisibility(View.GONE);
            canvasView.setVisibility(View.GONE);
            Log.d(TAG, "Prediction Empty!");
            return;
        }
        int iAct = (_predictions.size()-1 >=3)?2:_predictions.size()-1;
        if(_predictions.size()==0){
            canvasView.setLines(0);

        }
        else
            canvasView.setLines(iAct+1);
        canvasView.setWidthPosition(widthPosition);
        canvasView.invalidate();
        for (; iAct>=0; iAct--) {
            drawPredictions(_predictions.get(iAct));
            arGeoPrediction.add(_predictions.get(iAct));
            NextPin.getNextPinInstance(getActivity()).getGeoLocName(this,
                    _predictions.get(iAct).getJumpTo());
        }


    }

    @Override
    public void receiveGeoLocName(GetLocName _getLocName) {

        if (_getLocName == null){
            Log.d(TAG, "Err. Name wasn't found!");
            return;
        }

        llGeoPredictions.removeAllViews();
        canvasView.setLines(0);
        canvasView.invalidate();
        canvasView.setVisibility(View.VISIBLE);
        rlWaitingBar.setVisibility(View.GONE);
        Activity act = getActivity();
        if (act == null){
            Log.w(TAG, "Fragment is no logner valid!");
            return;
        }
        if (arGeoPrediction == null){
            Log.d(TAG, "Err. Predictions null!");
            return;
        }
        else if (arGeoPrediction.size()== 0){
            Log.d(TAG, "Prediction Empty!");
            return;
        }
        int iAct = (arGeoPrediction.size()-1 >=3)?2:arGeoPrediction.size()-1;
        if(arGeoPrediction.size()==0)
            canvasView.setLines(0);
        else
            canvasView.setLines(iAct+1);
        canvasView.setWidthPosition(widthPosition);
        canvasView.invalidate();
        for(GeoPrediction geoPrediction:arGeoPrediction){
            if(_getLocName.getId()==geoPrediction.getJumpTo()){
                if(!_getLocName.getPersonalied_location().equals("")){
                    geoPrediction.setNameLocation(
                            _getLocName.getPersonalied_location());
                }
                else if(!_getLocName.getFs_name().equals("")){
                    geoPrediction.setNameLocation(_getLocName.getFs_name());

                }
                else if(!_getLocName.getFs_category().equals("")){
                    geoPrediction.setNameLocation(_getLocName.getFs_category());

                }
                else
                    geoPrediction.setNameLocation(geoPrediction.getJumpTo()+"");
            }
            drawPredictions(geoPrediction);
        }
    }//receiveGeoLocName
}//OneDayFragment class
