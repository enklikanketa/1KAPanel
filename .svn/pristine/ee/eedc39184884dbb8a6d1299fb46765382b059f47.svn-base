package enklikanketa.com.a1kapanel.Tasks;

import android.content.Context;
import android.os.AsyncTask;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import enklikanketa.com.a1kapanel.Libraries.GeneralLib;
import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.ServerCommunication;

/**
 * Created by podkrizniku on 07/12/2017.
 */

public class sendTriggeredGeofencesTask extends AsyncTask<Object, Object, String> {

    //application context cannot be leaked
    private Context ctx;
    private JSONObject triggered_geofence;
    private Database DB;

    /**
     *
     * @param context - Context
     * @param triggered_geofence - JSONObject of geofence with timestamp
     */
    public sendTriggeredGeofencesTask(Context context, JSONObject triggered_geofence) {
        ctx = context.getApplicationContext();
        this.triggered_geofence = triggered_geofence;

        DB = (Database) Database.getInstance(ctx);
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);
        //Log.d("1kapanel", "result tlog " + result);

        if (result != null) {
            if(!result.equals("no logs")) {
                try {
                    JSONObject obj = new JSONObject(result);

                    if (obj.has("note")) {
                        //remove all data of logs from DB
                        DB.deleteRows("things_to_send", "name = 'triggered_geofences'");
                    } else {
                        saveLog();
                        GeneralLib.reportCrash(new Exception("sendTriggeredGeofencesTask no note in response"), result);
                    }

                } catch (JSONException e) {
                    //Log.e(TAG, "sendRegistrationIDTask.class onPostExecute(): " + e);
                    GeneralLib.reportCrash(e, result);
                }
            }
        }
        //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
        else {
            saveLog();
            //do not show to user? what if activity is finished?
            //GeneralLib.showErrorToUser(ctx, ctx.getString(R.string.general_remote_server_error));
        }
    }

    @Override
    protected String doInBackground(Object... params) {
        return postTriggeredGeofences();
    }


    private String postTriggeredGeofences() {
        //pobere podatke o uporabniku iz baze
        String[] uporabnik = DB.getRowData("uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // poslji
        JSONObject object = new JSONObject();

        if(uporabnik != null) {
            // uporabnik prijavljen
            try {
                JSONObject logIn = new JSONObject();
                logIn.put("identifier", uporabnik[0]);
                logIn.put("id_server", uporabnik[1]);
                object.put("Login", logIn);

                JSONArray triggeredGeofences = new JSONArray();

                //pobere podatke o uporabniku iz baze
                JSONArray old_tgeos_to_send = DB.getJSONData("things_to_send",
                        new String[]{"value", "tsSec"}, "name = 'triggered_geofences'");

                if(old_tgeos_to_send != null)
                    triggeredGeofences = old_tgeos_to_send;

                //add new log if not null
                if(triggered_geofence != null)
                    triggeredGeofences.put(triggered_geofence);

                if(triggeredGeofences.length() == 0)
                    return "no logs";
                else
                    object.put("triggeredGeofences", triggeredGeofences);
            } catch (JSONException e) {
                GeneralLib.reportCrash(e, object.toString());
                //Log.e(TAG, "Or could not parse malformed JSON: \"" + object.toString() + "\"");
            }

            ServerCommunication SC = new ServerCommunication(ctx);
            return SC.PostTriggeredGeofences(object);
        }
        return null;
    }

    /**
     * Saves log in database for updating to server when connection available
     */
    private void saveLog() {

        //if triggered_geofence = null, means that it failed to send old data - they are already in DB, no need to save
        if (triggered_geofence != null) {
            try {
                //pobere podatke o uporabniku iz baze
                DB.insertData("things_to_send",
                        new String[][]{{"name", "triggered_geofences"},
                                {"value", triggered_geofence.getString("value")},
                                {"tsSec", triggered_geofence.getString("tsSec")}});

            } catch (JSONException e) {
                GeneralLib.reportCrash(e, triggered_geofence.toString());
                //Log.e(TAG, "Or could not parse malformed JSON: \"" + object.toString() + "\"");
            }
        }
    }
}