/*
 * Made by:
 * Uroš Podkrižnik
 * uros.podkriznik(at)gmail.com
 * Tel.: 041829380
 */

package enklikanketa.com.a1kapanel.System;

import android.content.Context;
import android.util.Log;

import org.json.JSONObject;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import enklikanketa.com.a1kapanel.R;

public class ServerCommunication {
    //https://www.1ka.si/ ali http://test.1ka.si/ ali http://192.168.1.101/1ka/ (localhost)

    //vpis uporabnika
    public static String PostLogin(Context con, JSONObject obj) {
        //ce nima slojezik, poslji parameter ang v primeru, da se registrira z drugim jezikom
        String params = null;
        /*if (!(generalLib.getLocale(con) + "").equals("sl_SI"))
            params = "&regFromEnglish=1";*/

        return APIexecutePost(con, obj, "checkLoginApp", params);
    }

    //objava vprasalnika
    public static String PostDeviceInfo(Context con, JSONObject obj) {
        return APIexecutePost(con, obj, "mazaUpdateDeviceInfo", null);
    }

    //objava vprasalnika
    public static String PostVprasalnik(Context con, JSONObject obj) {
        return APIexecutePost(con, obj, "createSurvey", null);
    }

    //objava vprasalnika
    public static String PostDeleteVprasalnik(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "deleteSurvey", "&ank_id=" + id);
    }

    //prikaz rezultatov
    public static String PostRezultati(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "getSurveyFrequencies", "&ank_id=" + id);
    }

    //prikaz vprasanj ankete
    public static String PostGetSurvey(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "getSurvey", "&ank_id=" + id);
    }

    //update ankete
    public static String PostUpdateSurvey(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "updateSurvey", "&ank_id=" + id);
    }

    //update vrednosti
    public static String PostUpdateOrCreateOption(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "updateOrCreateOption", "&ank_id=" + id);
    }

    //delete vrednosti
    public static String PostDeleteOption(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "deleteOption", "&ank_id=" + id);
    }

    //delete vprasanja
    public static String PostDeleteQuestion(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "deleteQuestion", "&ank_id=" + id);
    }

    //kopiraj vprasanje
    public static String PostCopyQuestion(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "copyQuestion", "&ank_id=" + id);
    }

    //kopiraj anketo
    public static String PostCopySurvey(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "copySurvey", "&ank_id=" + id);
    }

    //update question order
    public static String PostUpdateQuestionOrder(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "updateQuestionOrder", "&ank_id=" + id);
    }

    //create question
    public static String PostCreateQuestion(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "createQuestion", "&ank_id=" + id);
    }

    //create question
    public static String PostUpdateQuestion(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "updateQuestion", "&ank_id=" + id);
    }

    //prikaz javnih povezav
    public static String PostJavnePovezave(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "getSurveyHashes", "&ank_id=" + id);
    }

    //odstranitev javne povezave
    public static String PostDeleteLink(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "deleteLink", "&ank_id=" + id);
    }

    //dodajanje javne povezave
    public static String PostAddLink(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "addLink", "&ank_id=" + id);
    }

    //prikaz parapodatkov izpolnjevanja
    public static String PostDashboardVprasalnika(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "getSurveyDashboard", "&ank_id=" + id);
    }

    //spremeni aktivnost
    public static String PostSpremembaAktivnosi(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "SurveyActivation", "&ank_id=" + id);
    }

    //prikaz statusov
    public static String PostBlockRepeatedIP(Context con, JSONObject obj, String id) {
        return APIexecutePost(con, obj, "BlockRepeatedIP", "&ank_id=" + id);
    }

    //prikaz statusov
    public static String PostLanguageChange(Context con, JSONObject obj) {
        return APIexecutePost(con, obj, "languageChange", null);
    }

    /**
     * Post and return all questionaires from server
     *
     * @param con            - Context
     * @param obj            - JSONObject - json to post
     * @param id             - String - id of questionaire status to return - null for all questionaires
     * @param limit          - int - limit of top questionaires to return - 0 for no limit
     * @param mobile_created - int - for surveys created by app - 1, for surveys created from
     *                       web app - 0, for all surveys - -1
     * @return - String - json of data
     */
    public static String PostSeznamVsehVprasalnikov(Context con, JSONObject obj, String id, int limit,
                                                    int mobile_created) {
        //nastavi limite v parametre
        String params = "";
        if (id != null)
            params += "&ank_id=" + id;
        if (limit != 0)
            params += "&limit=" + limit;
        if (mobile_created != -1)
            params += "&mobile_created=" + mobile_created;

        return APIexecutePost(con, obj, "getSurveyList", params);
    }

    /**
     * Create link and hmac token and post it to server - for API
     *
     * @param con    - Context - context
     * @param obj    - JSONObject - data to send to server
     * @param action - String - action name of API
     * @param params - String - additional params to send in link - null if not set
     * @return String - server answer
     */
    private static String APIexecutePost(Context con, JSONObject obj, String action, String params) {
        if (Network.checkMobileInternet(con, true)) {

            //create request link
            String request = con.getString(R.string.server_url) +
                    "admin/survey/api/api.php?" + "action=" + action;

            //add aditional params if not null
            if (params != null)
                request += params;

            //Log.v("hitra1ka","obj "+obj.toString());

            //create hmac hash
            String hmac = HMAC_SHA256("8e76e16e764f228caa4fa7ed41b03302871910e96b3ba937260b68c89d61ac0a",
                    "POST" + request + obj.toString());

            //return server answer
            return Network.postData(request + "&identifier=mazaApp&token=" + hmac, obj);

        } else
            return null;
    }

    /**
     * Make HMAC SHA256 String of given message
     *
     * @param secret  - String - private key
     * @param message - String - Message to hash
     * @return - String - HMAC SHA256
     */
    static private String HMAC_SHA256(String secret, String message) {
        try {
            Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), "HmacSHA256");
            sha256_HMAC.init(secret_key);

            return bytesToHex(sha256_HMAC.doFinal(message.getBytes("UTF-8")));
        } catch (Exception e) {
            Log.e("hitra1ka", "HMAC_SHA256 " + e);
        }
        return null;
    }

    /**
     * Stringify byte array
     *
     * @param in -byte[] - byte array to stringify
     * @return - String - Stringified bytes
     */
    private static String bytesToHex(byte[] in) {
        final StringBuilder builder = new StringBuilder();
        for (byte b : in) {
            builder.append(String.format("%02x", b));
        }
        return builder.toString();
    }
}
