package enklikanketa.com.a1kapanel.Tasks;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Intent;
import android.os.AsyncTask;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import enklikanketa.com.a1kapanel.Adapters.VprasalnikiSimpleAdapter;
import enklikanketa.com.a1kapanel.Libraries.GeneralLib;
import enklikanketa.com.a1kapanel.R;
import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.Network;
import enklikanketa.com.a1kapanel.System.ServerCommunication;
import enklikanketa.com.a1kapanel.WebResevanje;
import enklikanketa.com.a1kapanel.vpis;

public class getSurveyList extends AsyncTask<Object, Object, String> {

    Activity ctx;
    private TextView text_ni_vprasalnikov;
    ProgressDialog loader;
    ListView seznam;
    List<HashMap<String, String>> list = new ArrayList<>();
    private int limit;
    private View parent;
    private String TAG = "getSurveyList";

    public getSurveyList(Activity context, int limit1, TextView text_ni_vprasalnikov1,
                         ListView seznam1, View parent1) {

        ctx = context;
        limit = limit1;
        text_ni_vprasalnikov = text_ni_vprasalnikov1;
        seznam = seznam1;
        parent = parent1;
    }

    protected void onPreExecute() {
        super.onPreExecute();
        loader = ProgressDialog.show(ctx, "",
                ctx.getResources().getString(R.string.gathering_data_progress), true);
    }

    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        if (result == null) {
            GeneralLib.dismissDialog(ctx, loader);
            //preveri, ce je povezava
            //Network.checkMobileInternet(ctx, true);
            Toast.makeText(ctx, ctx.getText(R.string.general_remote_server_error)
                    .toString(), Toast.LENGTH_LONG).show();
        } else if (result.equals("OK")) {
            createSeznam(ctx, seznam, list);
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.GONE);
            seznam.setVisibility(View.VISIBLE);
        } else if (result.equals("empty") || result.equals("[]")) {
            if (text_ni_vprasalnikov != null)
                text_ni_vprasalnikov.setVisibility(View.VISIBLE);
            if (parent != null)
                parent.setVisibility(View.GONE);
            seznam.setVisibility(View.GONE);
        } else {
            GeneralLib.dismissDialog(ctx, loader);
            //if (!GeneralLib.otherErrors(ctx, result))
            GeneralLib.reportCrash(new Exception("getSurveyList onPostExecute() has error: "
                    + result), null);
        }

        GeneralLib.dismissDialog(ctx, loader);
    }

    protected String doInBackground(Object... params) {
        //pobere podatke o uporabniku iz baze
        Database DB = (Database) Database.getInstance(ctx);
        String[] uporabnik = DB.getRowData("uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // uporabnik prijavljen
        if (uporabnik != null) {
            // poslji
            JSONObject object = new JSONObject();
            JSONObject logIn = new JSONObject();
            String result = null;
            try {
                logIn.put("identifier", uporabnik[0]);
                logIn.put("id_server", uporabnik[1]);
                object.put("Login", logIn);
                object.put("timeZone", Calendar.getInstance().getTimeZone().getID());

                ServerCommunication SC = new ServerCommunication(ctx);
                result = SC.PostGetSurveyList(object);

                if (result != null) {

                    JSONArray vprasalniki = new JSONArray(result);

                    if (vprasalniki.length() > 0) {
                        for (int i = 0; i < vprasalniki.length(); i++) {
                            HashMap<String, String> map = new HashMap<>();
                            JSONObject vprasalnik = new JSONObject(vprasalniki.getJSONObject(i).toString());
                            String name = vprasalnik.has("name") && !vprasalnik.getString("name").equals("null") ?
                                    vprasalnik.getString("name")+"\n" :
                                    (vprasalnik.has("address") ? vprasalnik.getString("address")+"\n" : "");
                            String ime = GeneralLib.fromHtml(vprasalnik.getString("naslov")).toString();
                            map.put("ime", ime);
                            map.put("srv_id", vprasalnik.getString("srv_id"));
                            map.put("srv_version", vprasalnik.getString("srv_version"));
                            map.put("text_spodaj", name+vprasalnik.getString("srv_version"));
                            map.put("link", vprasalnik.get("link").toString());
                            map.put("status", vprasalnik.getString("status"));
                            map.put("version_datetime", vprasalnik.getString("datetime"));
                            if(vprasalnik.has("geof_id"))
                                map.put("geof_id", vprasalnik.getString("geof_id"));
                            else
                                map.put("geof_id", "");
                            if(vprasalnik.has("act_id"))
                                map.put("act_id", vprasalnik.getString("act_id"));
                            else
                                map.put("act_id", "");

                            list.add(map);
                        }
                        return "OK";
                    } else
                        return "empty";

                }
                //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
                else {
                    //preveri, ce je povezava
                    return null;
                }
            } catch (JSONException e) {
                Log.e(TAG, "getSurveyList onPostExecute(): " + e);
                GeneralLib.reportCrash(e, result);
                GeneralLib.dismissDialog(ctx, loader);
                return result;
            }
        }
        // ni prijavljen - gre na prijavo
        else {
            Intent myIntent = new Intent(ctx, vpis.class);
            ctx.startActivity(myIntent);
            //GeneralLib.finishNazaj(ctx);
            ctx.finish();
            return null;
        }
    }

    /**
     * Fills ListView for all questionaires
     *
     * @param ctx             - Activity
     * @param seznam          - ListView - ListView to fill
     * @param vprasalniki     - List<HashMap<String, String>> - data to put in ListView
     */
    private void createSeznam(final Activity ctx, ListView seznam,
                              List<HashMap<String, String>> vprasalniki) {
        //kateri podatki se rabijo (po vrsti)
        String[] from = new String[]{"ime", "text_spodaj", "link", "srv_id", "status",
                "srv_version", "version_datetime", "geof_id", "act_id"};
        //v katere textviewe se bodo filali zgornji podatki (po vrsti)
        int[] to = new int[]{R.id.litem_zgoraj, R.id.litem_spodaj, R.id.link, R.id.id, R.id.status,
                R.id.srv_version, R.id.version_datetime, R.id.geof_id, R.id.act_id};

        //nastavi adapter
        VprasalnikiSimpleAdapter adapter = new VprasalnikiSimpleAdapter(
                ctx, vprasalniki, R.layout.list_item_vprasalniki, from, to);
        seznam.setAdapter(adapter);

        //nastavi, ko se item (vprasalnik) izbere v listviewu
        seznam.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
        seznam.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position1, long id) {
                view.setSelected(true);
                Intent myIntent = new Intent(ctx, WebResevanje.class);

                //dobi version
                TextView srv_version = view.findViewById(R.id.srv_version);
                //dobi active
                TextView link = view.findViewById(R.id.link);
                //dobi timestamp
                TextView vdatetime = view.findViewById(R.id.version_datetime);
                //dobi id
                TextView id1 = view.findViewById(R.id.id);
                //dobi id geofenca
                TextView geof_id = view.findViewById(R.id.geof_id);
                //dobi id activity
                TextView act_id = view.findViewById(R.id.act_id);

                Database DB = (Database) Database.getInstance(ctx);

                long version_timestamp = 0;
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    version_timestamp = !vdatetime.getText().toString().equals("null") ? sdf.parse(vdatetime.getText().toString()).getTime() : 0;

                    if(!srv_version.getText().toString().equals("")){
                        String[] repeaterrow = DB.getRowData("repeaters",
                                new String[]{"datetime_last_check"},
                                "srv_id=" + id1.getText().toString());
                            if(repeaterrow != null) {
                                long saved_repeater_timestamp = (repeaterrow[0] != null && !repeaterrow[0].equals("null")) ? sdf.parse(repeaterrow[0]).getTime() : 0;

                                //save last_check_timestamp
                                if (!vdatetime.getText().toString().equals("null")
                                        && !vdatetime.getText().toString().equals("null") && ((repeaterrow[0] != null && repeaterrow[0].equals("null")) ||
                                        version_timestamp > saved_repeater_timestamp)) {
                                    ContentValues cv = new ContentValues();
                                    cv.put("datetime_last_check", vdatetime.getText().toString());
                                    DB.updateData("repeaters", cv, "srv_id='" + id1.getText().toString() + "'");
                                }
                            }
                    }
                }catch (ParseException e){
                    Log.e(TAG, "getSurveyList.createSeznam() - Error: " + e.getMessage());
                    GeneralLib.reportCrash(e, null);
                }

                String mode = "";
                if(!geof_id.getText().toString().equals(""))
                    mode = "geofence";
                else if(!act_id.getText().toString().equals(""))
                    mode = "activity";
                else if(!srv_version.getText().toString().equals(""))
                    mode = "repeater";

                myIntent.putExtra("srv_version_timestamp", version_timestamp/1000+"");
                myIntent.putExtra("geof_id", geof_id.getText().toString());
                myIntent.putExtra("act_id", act_id.getText().toString());
                myIntent.putExtra("mode", mode);
                myIntent.putExtra("link", link.getText().toString());
                myIntent.putExtra("id_vprasalnika", id1.getText().toString());

                if (Network.checkMobileInternet(ctx, true)) {
                    ctx.startActivity(myIntent);
                    //generalLib.finishNaprej(ctx, false);
                }
            }
        });
    }// konec createSeznam()
}