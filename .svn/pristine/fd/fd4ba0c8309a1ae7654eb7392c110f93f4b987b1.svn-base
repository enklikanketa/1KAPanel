package enklikanketa.com.a1kapanel;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;

import enklikanketa.com.a1kapanel.Libraries.AlarmLib;
import enklikanketa.com.a1kapanel.System.Database;
import enklikanketa.com.a1kapanel.System.ServerCommunication;

/**
 * Created by podkrizniku on 07/12/2017.
 */

// razred Work uporabljen, da deluje progressbar med loadanjem - Logiranje
public class sendGetAlarmsTask extends AsyncTask<Object, Object, String> {

    private Context ctx;

    sendGetAlarmsTask(Context context) {
        ctx = context;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);
        //Log.d("1kapanel", "result getalarms " + result);

        if (result != null) {
            try {
                JSONObject obj = new JSONObject(result);

                if (obj.has("alarms")) {
                    JSONArray alarms = obj.getJSONArray("alarms");

                    for(int i = 0; i < alarms.length(); i++) {
                        JSONObject alarm = alarms.getJSONObject(i);

                        HashMap<String, String> data = new HashMap<>();
                        data.put("link", alarm.getString("link"));
                        data.put("ank_id", alarm.getString("ank_id"));
                        data.put("title", alarm.getString("alarm_notif_title"));
                        data.put("message", alarm.getString("alarm_notif_message"));
                        data.put("repeat", alarm.getString("alarm_notif_repeat"));
                        data.put("sound", alarm.getString("alarm_notif_sound"));

                        AlarmLib.setOrUpdateNewAlarm(ctx, data);
                    }
                } else {

                }

            } catch (JSONException e) {
                Log.e("1kapanel", "sendGetAlarmsTask.class onPostExecute(): " + e);
                //generalLib.reportCrash(e, result);
            }
        }
        //ce je null, pomeni da server ni dosegljiv ali pa so druge napake
        else {

        }
    }

    @Override
    protected String doInBackground(Object... params) {
        return postDeviceInfo();
    }


    private String postDeviceInfo() {
        //pobere podatke o uporabniku iz baze
        String[] uporabnik = Database.getRowData(new Database(ctx), "uporabnik",
                new String[]{"identifier", "id_server"}, null);

        // poslji
        JSONObject object = new JSONObject();

        if(uporabnik != null) {
            // uporabnik prijavljen
            try {
                JSONObject logIn = new JSONObject();
                logIn.put("identifier", uporabnik[0]);
                logIn.put("id_server", uporabnik[1]);
                object.put("Login", logIn);

            } catch (JSONException e) {
                Log.e("1kapanel", "Or could not parse malformed JSON: \"" + object.toString() + "\"");
            }

            return ServerCommunication.PostGetAlarms(ctx, object);
        }
        return null;
    }
}